print('x is now equal to 5! Break Loop')
break #Loop 빠져 나가기.
print('Woo I printed too!')
}
}
print(variable)
v<- c(1, 2, 3)
for(variable in v){
print(variable)
}
v<- c(1, 2, 3)
for(variable in v){
print(variable)
}
#Execute some code
#for every temp.var in v
print(temp.var)
v<- c(1, 2, 3, 4, 5)
for(temp.var in v){
#Execute some code
#for every temp.var in v
print(temp.var)
}
temp.var
temp.var
temp.var
#Execute some code
#for every temp.var in v
print('hello')
for(temp.var in v){
#Execute some code
#for every temp.var in v
print('hello')
}
v<- c(1, 2, 3)
for(variable in v){
print(variable)
}
v<- c(1, 2, 3, 4, 5)
for(temp.var in v){
#Execute some code
#for every temp.var in v
print('hello')
}
for(temp.var in v){
result <- temp.var+1
print('The temp.var plus 1 is equal to')
print(result)
}
my.list<- list(c(1,2,3), mtcars, 12)
for(item in my.list){
print(item)
}
mat
mat
mat <- matrix(1:25, nrow=5)
mat
print(num)
for(num in mat){
print(num)
}
v<- c(1, 2, 3)
for(variable in v){
print(variable)
}
v<- c(1, 2, 3, 4, 5)
for(temp.var in v){
#Execute some code
#for every temp.var in v
print('hello')
}
for(temp.var in v){
result <- temp.var+1
print('The temp.var plus 1 is equal to')
print(result)
}
my.list<- list(c(1,2,3), mtcars, 12)
for(item in my.list){
print(item)
}
#메트릭스 내부의 요소도 싹다 해주네(칼럼 순서로)
mat <- matrix(1:25, nrow=5)
mat
for(num in mat){
print(num)
}
1:nrow(mat)
1:nrow(mat)
#Nested For Loop
for (row in 1:nrow(mat)){
for(col in mat)
}
#Nested For Loop
for (row in 1:nrow(mat)){
for(col in mat)
}
1:nrow(mat)
nrow(mat)
1:5
ncol(mat)
ncol(mat)
#메트릭스 내부의 요소도 싹다 해주네(칼럼 순서로)
mat <- matrix(1:25, nrow=5)
for (row in 1:nrow(mat)){
for(col in 1:ncol(mat))
print(paste('The element at row:', row, 'and col:', col, 'is', mat[row:col]))
}
for (row in 1:nrow(mat)){
for(col in 1:ncol(mat)){
print(paste('The element at row:', row, 'and col:', col, 'is', mat[row:col]))
}
}
for (row in 1:nrow(mat)){
for(col in 1:ncol(mat)){
print(paste('The element at row:', row, 'and col:', col, 'is', mat[row:col]))
}
}
print(paste('The selected row is:', row))
#Nested For Loop
for (row in 1:nrow(mat)){
for(col in 1:ncol(mat)){
print(paste('The selected row is:', row))
print(paste('The element at row:', row, 'and col:', col, 'is', mat[row:col]))
}
}
name_of_func <- function(input1, input2, input3=45){
#Code Execute
result <- input1+input2
return(result)
}
a<-name_of_func(1, 3)
a
hello
hello()
#FUNCTION WITH NO INPUT
hello <- function(){
print('Hello')
}
hello()
print(paste('Hello') name)
hello()
print(paste('Hello'), name)
#FUNCTION WITH NO INPUT
hello <- function(name){
print(paste('Hello'), name)
}
print(paste('Hello', name))
hello('Sanghyuk')
#FUNCTION WITH NO INPUT
hello <- function(name){
print(paste('Hello', name))
}
hello('Sanghyuk')
#FUNCTION WITH NO INPUT
hello <- function(name){
print(paste('Hello, ', name))
}
hello('Sanghyuk')
print(paste('Hello,', name))
#FUNCTION WITH NO INPUT
hello <- function(name){
print(paste('Hello,', name))
}
hello('Sanghyuk')
hello()
#FUNCTIONS
hello <- function(name='FRANK'){
print(paste('Hello,', name))
}
hello()
hello('Sanghyuk')
print(num1+num2)
add_num <- function(num1, num2){
print(num1+num2)
}
add_num(4, 5)
my.sum <- num1+num2
add_num <- function(num1, num2){
my.sum <- num1+num2
return(num1+num2)
}
add_num <- function(num1, num2){
my.sum <- num1+num2
return(my.sum)
}
result<-add_num(4, 5)
add_num <- function(num1, num2){
my.sum <- num1+num2
return(my.sum)
}
result<-add_num(4, 5)
result
result<-add_num(6, 7)
result
result<-add_num(6, 7)
result
add_num <- function(num1, num2){
my.sum <- num1+num2
return(my.sum)
}
result<-add_num(6, 7)
result
print(times5)
#SCOPE
#function 내부의 variable은 오직 함수 내로 한정됨
time5 <- function(num){
return(num*5)
}
return(num*5)
#SCOPE
#function 내부의 variable은 오직 함수 내로 한정됨
times5 <- function(num){
return(num*5)
}
print(times5)
print(times5(20))
#SCOPE
#function 내부의 variable은 오직 함수 내로 한정됨
times5 <- function(num){
my.result <- num*5
return(my.result)
}
print(times5(20))
my.output <- times5(100)
print(my.output)
my.output <- times5(100)
print(my.output)
my.result
stuff  <- " I'm global stuff"
#
v<- " I'm a global variable"
print(v)
v<- " I'm a global variable"
stuff  <- " I'm global stuff"
fun <- function(stuff){
print(v)
stuff<- "Reassign stuff inside of this function fun"
print(stuff)
}
fun(stuff)
print(stuff)
print(stuff) # Global Stuff
fun(stuff) #Reassign Stuff
#
hello_you <- function(name){
print(paste('Hello', name))
}
#
hello_you <- function(name){
print(paste('Hello', name))
}
hello_you('sanghyuk')
#
hello <- function(name){
return (paste('Hello', name))
}
hi<- hello('sanghyuk')
hi
#EX1
prod(1, 5)
#EX1
prod(4, 5)
#EX1
prod(4, 5)
prod(4, 5)
#EX1
ex1_func <- function(num1, num2){
return prod(num1, num2)
}
#EX1
ex1_func <- function(num1, num2){
return prod(num1, num2)
}
#EX1
prod<- function(num1, num2){
return prod(num1, num2)
}
#EX1
prod <- function(num1, num2){
return num1*num2
}
#EX1
prod <- function(num1, num2){
return num1 * num2
}
return num1 * num2
#EX1
prod <- function(num1, num2){
return num1 * num2
}
#EX1
prod <- function(num1, num2){
return (num1 * num2)
}
prod(4, 5)
v<-c(1,2,3,4,5)
1 in v
1 in v
ex2_func(5, c(1,2,3,4,5))
#EX2
ex2_func <- function(num1, v1){
for(vnum in v1){
if(vnum ==1){
return (TRUE)
}else{
return (FALSE)
}
}
}
ex2_func(5, c(1,2,3,4,5))
ex2_func(6, c(1,2,3,4,5))
ex2_func(7, c(1,2,3,4,5))
#EX2
ex2_func <- function(num1, v1){
for(vnum in v1){
if(vnum == num1){
return (TRUE)
}else{
return (FALSE)
}
}
}
ex2_func(7, c(1,2,3,4,5))
ex2_func(5, c(1,2,3,4,5))
ex2_func(2, c(1,2,3,4,5))
#EX2
ex2_func <- function(num1, v1){
for(vnum in v1){
if(vnum == num1){
return (TRUE)
}
}
return (FALSE)
}
ex2_func(2, c(1,2,3,4,5))
ex2_func(3, c(1,2,3,4,5))
ex2_func(0, c(1,2,3,4,5))
num_check(0, c(1,2,3,4,5))
#EX2
num_check <- function(num1, v1){
for(vnum in v1){
if(vnum == num1){
return (TRUE)
}
}
return (FALSE)
}
num_check(0, c(1,2,3,4,5))
#EX3
num_count(num, vector){
count <- 0
for( vnum in vector){
if(vnum == num){
count <- count+1
}
}
print(count)
}
#EX3
num_count(num, vector){
count <- 0
for( vnum in vector){
if(vnum == num){
count <- count+1
}
}
print(count)
}
for( vnum in v3){
if(vnum == num){
count <- count+1
}
}
#EX3
num_count(num, v3){
count <- 0
for( vnum in v3){
if(vnum == num){
count <- count+1
}
}
print(count)
}
#EX3
num_count<- function(num, v3){
count <- 0
for( vnum in v3){
if(vnum == num){
count <- count+1
}
}
print(count)
}
num_count(2,c(1,1,2,2,3,3))
Out[26]:
num_count(1,c(1,1,2,2,3,1,4,5,5,2,2,1,3))
num_count(1,c(1,1,2,2,3,1,4,5,5,2,2,1,3))
17/5
17/5
17/5
17%%5
#EX4
#5kg짜리 하나랑, 1키로 짜리 하나
bar_count <- function(weight){
five <- round(weight/5)
one <- weight%%5
print(five+one)
}
bar_count(6)
bar_count(17)
17%%3 ==0
list <- list(num1, num2, num3)
summer <- function(num1, num2, num3){
list <- list(num1, num2, num3)
number_of_integer<- 1
while(number_of_integer < 4){
num[number_of_integer]%%3 ==0
boolList <- append()
}
return (num1+num2+num3)
}
summer <- function(num1, num2, num3){
num_list <- list(num1, num2, num3)
number_of_integer<- 1
while(number_of_integer < 4){
boolList <- append(num_list[number_of_integer]%%3 ==0)
number_of_integer<-number_of_integer+1
}
return (num1+num2+num3)
}
summer(1, 2, 3)
list(1,2,3)
list1<- list(1,2,3)
list1[1]
list1[[1]]
summer <- function(num1, num2, num3){
num_list <- list(num1, num2, num3)
number_of_integer<- 1
while(number_of_integer < 4){
boolList <- append(num_list[[number_of_integer]]%%3 ==0)
number_of_integer<-number_of_integer+1
}
return (num1+num2+num3)
}
summer(1, 2, 3)
summer <- function(num1, num2, num3){
num_vec <- c(num1, num2, num3)
number_of_integer<- 1
while(number_of_integer < 4){
boolList <- append(num_list[[number_of_integer]]%%3 ==0)
number_of_integer<-number_of_integer+1
}
return (num1+num2+num3)
}
#EX5 #더한거 리턴 하는데, 3의 배수이면 0으로
?append()
summer <- function(num1, num2, num3){
num_vec <- c(num1, num2, num3)
for(num in num_vec){
if(){
bool_vec <- (bool_vec, T)
}else{
bool_vec <- (bool_vec, F )
}
}
return (num1+num2+num3)
}
v5<-c(1,2,3)
v5[1]
sum(v5[T,T,F])
#EX5 #더한거 리턴 하는데, 3의 배수이면 0으로
?append()
summer <- function(num1, num2, num3){
num_vec <- c(num1, num2, num3)
for(num in num_vec){
if(num%%3 ==0){
bool_vec <- append(bool_vec, T)
}else{
bool_vec <- append(bool_vec, F )
}
}
return (num1+num2+num3)
}
summer(1, 2, 3)
#EX5 #더한거 리턴 하는데, 3의 배수이면 0으로
?append()
summer <- function(num1, num2, num3){
sum <- 0
num_vec <- c(num1, num2, num3)
for(num in num_vec){
if(num%%3 !=0){
sum <- sum+num
}
}
return (sum)
}
summer(1, 2, 3)
summer(5,7, 9)
summer(3,6, 9)
#EX6 prime -> 소수
prime_check <- function(num) {
if (num == 2) {
return(TRUE)
} else if (any(num %% 2:(num-1) == 0)) {
return(FALSE)
} else {
return(TRUE)
}
}
3 %% 2:5
3 %% 2:5 ==0
3 %% 2:5 ==0
