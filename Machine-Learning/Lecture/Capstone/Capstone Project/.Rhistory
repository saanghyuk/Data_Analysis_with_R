head(flight)
head(flights)
flights
summary(flights)
#filter() (and slice())
head(flight)
heade(filter(flight, month==11, day==3, carrier=='AA'))
heade(filter(flights, month==11, day==3, carrier=='AA'))
heade(filter(flights, month==11, day==3, carrier=='AA'))
head(filter(flights, month==11, day==3, carrier=='AA'))
#slice()
slice(1:10)
#slice()
slice(flight, 1:10)
#slice()
slice(flight, 1:10)
#slice()
slice(flights, 1:10)
#arrange()
#order하고 싶은 순서대로!
head(arrange(flights, year, month, day, air_time))
#arrange()
#order하고 싶은 순서대로!
head(arrange(flights, year, month, day, air_time))
#arrange()
#order하고 싶은 순서대로!
head(arrange(flights, year, month, day, arr_time))
head(arrange(flights, desc(dep_delay)))
#select()
head(select(flights, carrier))
#select()
head(select(flights, carrier))
head(select(flights, carrier, arr_time))
head(select(flights, carrier, arr_time, month))
#rename()
head(rename(flights, airline_carrier=carrier))
#rename()
head(rename(flights, airline_carrier=carrier))
#rename()
head(rename(flights, airline_carrier=carrier))
#distinct()
distinct(select(flights, carrier))
#mutate()
mutate(flights)
#mutate()
mutate(flights, new_col= arr_delay-delay)
#mutate()
mutate(flights, new_col=arr_delay-dep_delay)
#mutate()
head(mutate(flights, new_col=arr_delay-dep_delay))
#transmute()
head(transmutate(flights, new_col=arr_delay*dep_delay))
#transmute() #mutate랑 같지만, 오직 새로 생긴 칼럼만을 리턴함
head(transmute(flights, new_col=arr_delay*dep_delay))
#summarise()
summarise(flights, avg_air_time=mean(air_time, na.rm=TRUE))
s
#summarise()
summarise(flights, avg_air_time=mean(air_time, na.rm=TRUE))
#sample_n() and sample_frac()
summarise(flights, total_air_time=sum(air_time, na.rm=TRUE))
#sample_n() and sample_frac()
sample_n(flights, 10)
sample_frac(flights, 0.1) #10%
sample_frac(flights, 0.1) #10%
sample_frac(flights, 0.2) #10%
#slice()
slice(flights, 1:10) #row
library(dplyr)
df <- mtcars
df
sample_n(filter(df, mpg>20))
arrange(sample_n(filter(df, mpg>20)))
arrange(sample_n(filter(df, mpg>20), size=5), desc(mpg))
filter(df, mpg>20)
arrange(sample_n(filter(df, mpg>20), size=5), desc(mpg))
result <- arrange(sample_n(filter(df, mpg>20), size=5), desc(mpg))
result
print(result)
print(result)
#그런데 그냥 네스팅 하는거는 너무 복잡하고, 두번째는 변수를 너무 많이 씀.
#Pipe Operator
#Data %>% op1 %>% op2 %>% op3
result <- df %>% filter(mpg>20) %>% sample_n(size=5) %>% arrange(desc(mpg))
result
library(dplyr)
head(mtcars)
#1
filter(mtcars, mpg>20, cyl==6)
#2
arrange(mtcars, cyl, wt)
#2
arrange(mtcars, cyl, desc(wt)
#2
arrange(mtcars, cyl, desc(wt))
#2
arrange(mtcars, cyl, desc(wt))
#2
head(arrange(mtcars, cyl, desc(wt)))
#3
select(df, mpg, hp)
#4
distinct(df, gear)
head(mutate(df, Performance=hp/wt))
#5
summarise(df, avg_mpg=mean(mpg, na.rm=T))
#6
df %>% filter(cyl==6) %>% mean(hp)
#6
df %>% filter(cyl==6) %>% mean(hp, rm.na=T)
#6
df %>% filter(cyl==6) %>% mean(hp, na.rm=T)
#6
df %>% filter(cyl==6)
#6
df %>% filter(cyl==6) %>% select(hp)
#6
df %>% filter(cyl==6) %>% select(hp) &>& mean(hp, na.rm=T)
#6
df %>% filter(cyl==6) %>% select(hp) &>& mean(hp)
#6
df %>% filter(cyl==6) %>% select(hp) %>% mean(hp, na.rm=T)
#6
df %>% filter(cyl==6) %>% select(hp) %>% mean(hp)
#6
df %>% filter(cyl==6) %>% select(hp)
#6
df %>% filter(cyl==6) %>% select(hp) %>% summarise(mean_hp=mean(hp, na.rm=T))
#4
distinct(df, gear)
#6
df %>% filter(cyl==6) %>% summarise(mean_hp=mean(hp, na.rm=T))
#6
df %>% filter(cyl==6) %>% summarise(mean_hp=mean(hp, na.rm=T))
install.packages('tidyr')
install.packages('data.table')
dataframe+ few extra features
#cleaner syntax
#data.table -> dataframe+ few extra features
#cleaner syntax
library(tidyr)
library(data.table)
#data.table -> dataframe+ few extra features
#cleaner syntax
library(tidyr)
library(data.table)
comp <- c(1,1,1,2,2,2,3,3,3)
yr <- c(1998,1999,2000,1998,1999,2000,1998,1999,2000)
q1 <- runif(9, min=0, max=100)
q2 <- runif(9, min=0, max=100)
q3 <- runif(9, min=0, max=100)
q4 <- runif(9, min=0, max=100)
q1
df <- data.frame(comp=comp,year=yr,Qtr1 = q1,Qtr2 = q2,Qtr3 = q3,Qtr4 = q4)
df
#gather()
gather(df, Quarter, Revenue, Qtr1:Qtr4)
#gather()
gather(df, Quarter, Revenue, Qtr1:Qtr4)
df %>% gather(Quarter, Revenue, Qtr1:Qtr4)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocks.gathtered <- stocks %>% gather(stock, price, X:Z)
stocks.gathtered
stocks
stocks
stocks.gathtered
stocks.gathered %>% spread(stock, price)
stocks.gathered %>% spread(stock, price)
stocks.gathered %>% spread(stock, price)
#spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathered %>% spread(stock, price)
stocks.gathtered
stocks.gathered %>% spread(stock, price) #spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathtered %>% spread(stock, price) #spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathered <- stocks %>% gather(stock, price, X:Z)
stocks.gathered <- stocks %>% gather(stock, price, X,Y,Z) #same with above
stocks.gathered
stocks
stocks.gathered %>% spread(stock, price) #spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathered %>% spread(stock, price) #spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathered
spread(stocks.gathered, stock, price)
spread(stocks.gathered, time, price) #기존에 있는 time을 넣었음.
spread(stocks.gathered, stock, price)
stocks.gathered
spread(stocks.gathered, time, price) #기존에 있는 time을 넣었음.
spread(stocks.gathered, stock, price)
stocks.gathered
stocks.gathered
stocks.gathered
spread(stocks.gathered, stock, price)
#separate()
df <- data.frame(new.col=c(NA, "a.x", "b.y", "c.z"))
df
seperate(df, new.col, c('ABC', 'xyz'))
seperate(df, new.col, c('ABC', 'xyz'))
seperate(df, new.col , c('ABC', 'xyz'))
separate(df, new.col , c('ABC', 'xyz'))
df <- data.frame(new.col=c(NA, "a-x", "b-y", "c-z"))
df
separate(data=df, col=new.col, into=c('ABC', 'xyz'))
df <- data.frame(new.col=c(NA, "a-x", "b-y", "c-z"))
separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep=)
separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep='-')
#일단 왠만한건 다 그대로 작동 잘하는데, 안되면 sep달아서 딱 구분 하자
df,sep<- separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep='-')
#일단 왠만한건 다 그대로 작동 잘하는데, 안되면 sep달아서 딱 구분 하자
df.sep<- separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep='-')
#unite()
unite(df.sep)
#unite()
unite(df.sep, col=new.col)
#일단 왠만한건 다 그대로 작동 잘하는데, 안되면 sep달아서 딱 구분 하자
df.sep<- separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep='-')
df.sep
#unite()
unite(df.sep, new.joined.col , abc, xyz )
#unite()
unite(df.sep, new.joined.col , ABC, xyz )
#unite()
unite(df.sep, new.joined.col , ABC, xyz , sep=' ')
#unite()
unite(df.sep, new.joined.col , ABC, xyz , sep='')
unite(df.sep, new.joined.col , ABC, xyz , sep='-')
#Notion 확인
install.packages('plotly')
library(ggplot2)
library(plotly)
#Notion 확인
install.packages('plotly')
library(ggplot2)
library(plotly)
pl <- ggplot(mtcars, aes(mpg, wt)) + geom_point
pl
pl <- ggplot(mtcars, aes(mpg, wt)) + geom_point
pl
pl <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
pl
gpl <- ggplotly(pl)
gpl
df <- data.frame (type=rep(1:2, each=1000), subtype=rep(c("a","b"), each=500), value=rnorm(4000, 0,1))
df <- data.frame (type=rep(1:2, each=1000), subtype=rep(c("a","b"), each=500), value=rnorm(4000, 0,1))
library(plyr)
df.text<-ddply(df,.(type,subtype),summarise,mean.value=mean(value))
p <- ggplot(df, aes(x=value, fill=subtype)) +
geom_histogram(position="identity", alpha=0.4)+
facet_grid(. ~ type)
p <- ggplotly(p)
p
?plyr
df
df.text<-ddply(df,.(type,subtype),summarise,mean.value=mean(value))
df.text
head(df)
df.text$mean.value
head(df)
df.text
df.text<-ddply(df,(type,subtype),summarise,mean.value=mean(value))
df.text<-ddply(df,.(type,subtype),summarise,mean.value=mean(value))
ddply
df.text
p <- ggplot(df, aes(x=value, fill=subtype)) +
geom_histogram(position="identity", alpha=0.4)+
facet_grid(. ~ type)
p <- ggplotly(p)
p <- ggplotly(p)
p
df.text<-ddply(df,.(type,subtype),summarise,mean.value=mean(value))
p <- ggplot(df, aes(x=value, fill=subtype)) +
geom_histogram(position="identity", alpha=0.4)+
facet_grid(. ~ type)
p
head(df)
p
p <- ggplotly(p)
setwd('/Users/sanghyuk/Documents/R/Machine-Learning/Lecture/Capstone/Capstone Project')
battle <- read.cse('Batting.csv')
setwd('/Users/sanghyuk/Documents/R/Machine-Learning/Lecture/Capstone/Capstone Project')
getwd()
battle <- read.csv('Batting.csv')
#
head(battle)
#
str(battle)
#
battle$AB
#
head(battle$AB)
#
head(battle$X2B)
#
head(battle)
#Batting Avering
batting$BA <-  batting$H / batting$AB
battling <- read.csv('Batting.csv')
setwd('/Users/sanghyuk/Documents/R/Machine-Learning/Lecture/Capstone/Capstone Project')
battling <- read.csv('Batting.csv')
#
head(battling)
#
str(battle)
#
head(battling$AB)
#
head(battling$X2B)
#
head(battling)
#Batting Avering
batting$BA <-  batting$H / batting$AB
battling <- read.csv('Batting.csv')
#
head(battling)
#
str(battle)
#
head(battling$AB)
#
head(battling$X2B)
#
head(battling)
batting <- read.csv('Batting.csv')
#
head(batting)
#
head(batting$AB)
#
head(batting$X2B)
#
head(batting)
#Batting Avering
batting$BA <-  batting$H / batting$AB
#On Base Percentage
batting$OBP <- (batting$H+batting$BB+batting$HBP) / batting$AB + batting$BB + batting$HBP + batting$SF
batting$OBP
#On Base Percentage
batting$OBP <- (batting$H+batting$BB+batting$HBP) / (batting$AB + batting$BB + batting$HBP + batting$SF)
batting$OBP
batting$OBP
head(batting$OBP)
tail(batting$BA, 5)
str(batting)
#Slugging Percentage
batting$X1B <- batting$H - batting$X2B - batting$X3B -batting$HR
batting$SLG <- (batting$X1B + 2*batting$X2B + 3*batting$X3B + 4*batting$HR) / batting$AB
#
str(batting)
#
sal <- read.csv('Salaries.csv')
head(sal)
head(batting)
batting$yearID < 1985
batting[batting$yearID < 1985, ]
batting[batting$yearID > 1985, ]
batting$yearID
subset(batting, yearID > 1985)
batting <- subset(batting, yearID > 1985)
str(batting)
summary(batting)
setwd('/Users/sanghyuk/Documents/R/Machine-Learning/Lecture/Capstone/Capstone Project')
batting <- read.csv('Batting.csv')
#
head(batting)
#
str(batting)
#
head(batting$AB)
#
head(batting$X2B)
#
head(batting)
#Batting Avering
batting$BA <-  batting$H / batting$AB
tail(batting$BA, 5)
#On Base Percentage
batting$OBP <- (batting$H+batting$BB+batting$HBP) / (batting$AB + batting$BB + batting$HBP + batting$SF)
head(batting$OBP)
#Slugging Percentage
batting$X1B <- batting$H - batting$X2B - batting$X3B -batting$HR
batting$SLG <- (batting$X1B + 2*batting$X2B + 3*batting$X3B + 4*batting$HR) / batting$AB
#
str(batting)
#
sal <- read.csv('Salaries.csv')
head(sal)
batting[batting$yearID > 1984, ]
batting <- subset(batting, yearID > 1985)
summary(batting)
setwd('/Users/sanghyuk/Documents/R/Machine-Learning/Lecture/Capstone/Capstone Project')
batting <- read.csv('Batting.csv')
#
head(batting)
#
str(batting)
#
head(batting$AB)
#
head(batting$X2B)
#
head(batting)
#Batting Avering
batting$BA <-  batting$H / batting$AB
tail(batting$BA, 5)
#On Base Percentage
batting$OBP <- (batting$H+batting$BB+batting$HBP) / (batting$AB + batting$BB + batting$HBP + batting$SF)
head(batting$OBP)
#Slugging Percentage
batting$X1B <- batting$H - batting$X2B - batting$X3B -batting$HR
batting$SLG <- (batting$X1B + 2*batting$X2B + 3*batting$X3B + 4*batting$HR) / batting$AB
#
str(batting)
#
sal <- read.csv('Salaries.csv')
head(sal)
batting[batting$yearID > 1984, ]
batting <- subset(batting, yearID > 1984)
summary(batting)
#
merge(batting, str, by=c(playerID, yearID ))
#
merge(batting, str, by=c('playerID', 'yearID' ))
#
merge(batting, sal, by=c('playerID', 'yearID' ))
#
combo <- merge(batting, sal, by=c('playerID', 'yearID' ))
summary(combo)
#
lost_players <- subset(combo, palyerID=c('damonjo01', 'giambja01', 'saenzol01'))
lost_players
#
combo <- merge(batting, sal, by=c('playerID', 'yearID' ))
summary(combo)
#
lost_players <- subset(combo, palyerID=c('damonjo01', 'giambja01', 'saenzol01'))
lost_players
#
lost_players <- subset(combo, palyerID %in% c('damonjo01', 'giambja01', 'saenzol01'))
#
lost_players <- subset(combo, playerID %in% c('damonjo01', 'giambja01', 'saenzol01'))
lost_players
#
lost_players <- subset(combo, playerID %in% c('damonjo01', 'giambja01', 'saenzol01'))
lost_players
#
combo <- merge(batting, sal, by=c('playerID', 'yearID' ))
summary(combo)
#
lost_players <- subset(combo, playerID %in% c('damonjo01', 'giambja01', 'saenzol01'))
lost_players
#
combo$playerID == 'saenzol01'
#
combo(combo$playerID == 'saenzol01', )
#
combo(combo$playerID == 'saenzol01' , )
#
combo <- merge(batting, sal, by=c('playerID', 'yearID' ))
#
combo(combo$playerID == 'saenzol01' , )
#
combo(combo$playerID = 'saenzol01' , )
#
comnbo(combo$playerID == 'saenzol01', )
#
comnbo(combo$playerID === 'saenzol01', )
#
comnbo(combo$playerID == 'saenzol01', )
#
combo(combo$playerID == 'saenzol01', )
#
combo[combo$playerID == 'saenzol01', ]
lost_players <- subset(combo, playerID %in% c('damonjo01', 'giambja01', 'saenzol01'))
lost_players
summary(lost_players)
lost_players <- subset(combo, playerID %in% c('damonjo01', 'giambja01', 'saenzol01'))
lost_players
str(lost_players)
lost_players <- subset(combo, playerID %in% c('damonjo01', 'giambja01', 'saenzol01'))
str(lost_players)
summary(lost_players)
lost_players
summary(lost_players)
lost_players <- subset(combo, playerID %in% c('damonjo01', 'giambja01', 'saenzol01'))
summary(lost_players)
lost_players
summary(lost_players)
tail(lost_players)
tail(lost_players, 5)
#
lost_players <- subset(lost_players, yearID==2001)
lost_players
#
combo
#
str(combo)
#
replacement <- subset(combo, yearID==2001)
replacement
#
lost_players <- lost_players[,c('playerID','H','X2B','X3B','HR','OBP','SLG','BA','AB')]
lost_players
#
library(dplyr)
avail.players <- filter(combo,yearID==2001)
avail.players
library(ggplot2)
ggplot(avail.players,aes(x=OBP,y=salary)) + geom_point()
