#6
df %>% filter(cyl==6) %>% mean(hp, rm.na=T)
#6
df %>% filter(cyl==6) %>% mean(hp, na.rm=T)
#6
df %>% filter(cyl==6)
#6
df %>% filter(cyl==6) %>% select(hp)
#6
df %>% filter(cyl==6) %>% select(hp) &>& mean(hp, na.rm=T)
#6
df %>% filter(cyl==6) %>% select(hp) &>& mean(hp)
#6
df %>% filter(cyl==6) %>% select(hp) %>% mean(hp, na.rm=T)
#6
df %>% filter(cyl==6) %>% select(hp) %>% mean(hp)
#6
df %>% filter(cyl==6) %>% select(hp)
#6
df %>% filter(cyl==6) %>% select(hp) %>% summarise(mean_hp=mean(hp, na.rm=T))
#4
distinct(df, gear)
#6
df %>% filter(cyl==6) %>% summarise(mean_hp=mean(hp, na.rm=T))
#6
df %>% filter(cyl==6) %>% summarise(mean_hp=mean(hp, na.rm=T))
install.packages('tidyr')
install.packages('data.table')
dataframe+ few extra features
#cleaner syntax
#data.table -> dataframe+ few extra features
#cleaner syntax
library(tidyr)
library(data.table)
#data.table -> dataframe+ few extra features
#cleaner syntax
library(tidyr)
library(data.table)
comp <- c(1,1,1,2,2,2,3,3,3)
yr <- c(1998,1999,2000,1998,1999,2000,1998,1999,2000)
q1 <- runif(9, min=0, max=100)
q2 <- runif(9, min=0, max=100)
q3 <- runif(9, min=0, max=100)
q4 <- runif(9, min=0, max=100)
q1
df <- data.frame(comp=comp,year=yr,Qtr1 = q1,Qtr2 = q2,Qtr3 = q3,Qtr4 = q4)
df
#gather()
gather(df, Quarter, Revenue, Qtr1:Qtr4)
#gather()
gather(df, Quarter, Revenue, Qtr1:Qtr4)
df %>% gather(Quarter, Revenue, Qtr1:Qtr4)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocks.gathtered <- stocks %>% gather(stock, price, X:Z)
stocks.gathtered
stocks
stocks
stocks.gathtered
stocks.gathered %>% spread(stock, price)
stocks.gathered %>% spread(stock, price)
stocks.gathered %>% spread(stock, price)
#spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathered %>% spread(stock, price)
stocks.gathtered
stocks.gathered %>% spread(stock, price) #spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathtered %>% spread(stock, price) #spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathered <- stocks %>% gather(stock, price, X:Z)
stocks.gathered <- stocks %>% gather(stock, price, X,Y,Z) #same with above
stocks.gathered
stocks
stocks.gathered %>% spread(stock, price) #spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathered %>% spread(stock, price) #spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathered
spread(stocks.gathered, stock, price)
spread(stocks.gathered, time, price) #기존에 있는 time을 넣었음.
spread(stocks.gathered, stock, price)
stocks.gathered
spread(stocks.gathered, time, price) #기존에 있는 time을 넣었음.
spread(stocks.gathered, stock, price)
stocks.gathered
stocks.gathered
stocks.gathered
spread(stocks.gathered, stock, price)
#separate()
df <- data.frame(new.col=c(NA, "a.x", "b.y", "c.z"))
df
seperate(df, new.col, c('ABC', 'xyz'))
seperate(df, new.col, c('ABC', 'xyz'))
seperate(df, new.col , c('ABC', 'xyz'))
separate(df, new.col , c('ABC', 'xyz'))
df <- data.frame(new.col=c(NA, "a-x", "b-y", "c-z"))
df
separate(data=df, col=new.col, into=c('ABC', 'xyz'))
df <- data.frame(new.col=c(NA, "a-x", "b-y", "c-z"))
separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep=)
separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep='-')
#일단 왠만한건 다 그대로 작동 잘하는데, 안되면 sep달아서 딱 구분 하자
df,sep<- separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep='-')
#일단 왠만한건 다 그대로 작동 잘하는데, 안되면 sep달아서 딱 구분 하자
df.sep<- separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep='-')
#unite()
unite(df.sep)
#unite()
unite(df.sep, col=new.col)
#일단 왠만한건 다 그대로 작동 잘하는데, 안되면 sep달아서 딱 구분 하자
df.sep<- separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep='-')
df.sep
#unite()
unite(df.sep, new.joined.col , abc, xyz )
#unite()
unite(df.sep, new.joined.col , ABC, xyz )
#unite()
unite(df.sep, new.joined.col , ABC, xyz , sep=' ')
#unite()
unite(df.sep, new.joined.col , ABC, xyz , sep='')
unite(df.sep, new.joined.col , ABC, xyz , sep='-')
head(bike)
bike <- read.csv('bikeshare.csv')
getwd()
setwd('/Users/sanghyuk/Documents/R/Machine-Learning/Lecture/Machine Learning with R/Linear Regression')
bike <- read.csv('bikeshare.csv')
head(bike)
colnames(bike)
library(ggplot2)
ggplot(bike)
ggplot(bike, aes(x=temp))
ggplot(bike, aes(x=temp)) + geom_point()
ggplot(bike, aes(x=temp)) + geom_dotplot()
ggplot(bike, aes(x=temp, y=count)) + geom_point()
ggplot(bike, aes(x=temp)) + geom_point()
ggplot(bike, aes(x=temp)) + geom_point()
ggplot(bike, aes(x=temp)) + geom_point()
colnames(bike)
ggplot(bike, aes(x=temp, y=bike)) + geom_point()
ggplot(bike, aes(temp)) + geom_point()
ggplot(bike, aes(x=temp)) + geom_point()
ggplot(bike, aes(x=temp)) + geom_point(aes(color=temp))
ggplot(bike, aes(x=temp)) + geom_point(aes(color=temp))
ggplot(bike, aes(x=temp))
ggplot(bike, aes(x=temp))+ + geom_point(aes(color=temp))
ggplot(bike, aes(x=temp))+ geom_point(aes(color=temp))
head(bike)
ggplot(bike, aes(x=temp, y=..count..))+ geom_point(aes(color=temp))
ggplot(bike, aes(x=temp, y=..count..))+ geom_point(aes(color=temp))
ggplot(bike, aes(x=temp),  y=..count..)+ geom_point(aes(color=temp))
ggplot(bike, aes(x=temp),  y=..count..)+ geom_count()
ggplot(bike, aes(x=temp))+ geom_count()
bike
ggplot(bike, aes(x=temp))+ geom_count()
bike
ggplot(bike, aes(x=atemp))+ geom_count()
ggplot(bike, aes(x=temp))+ geom_count()
ggplot(bike, aes(x=temp))+ geom_count()
ggplot(bike, aes(x=temp, y=..count..))+ geom_count()
ggplot(bike, aes(x=temp, y=count))+ geom_count()
ggplot(bike, aes(temp,count))+ geom_count()
ggplot(bike,aes(temp,count)) + geom_point(alpha=0.2, aes(color=temp)) + theme_bw()
bike
head(bike)
colnames(bike)ggplot(bike, aes(temp,count))+ geom_count()
colnames(bike)
ggplot(bike, aes(temp,count))+ geom_point()
ggplot(bike,aes(temp,count)) + geom_point(alpha=0.2, aes(color=temp))
library(ggplot2)
getwd()
setwd('/Users/sanghyuk/Documents/R/Machine-Learning/Lecture/Machine Learning with R/Linear Regression')
bike <- read.csv('bikeshare.csv')
head(bike)
colnames(bike)
head(bike)
colnames(bike)
ggplot(bike,aes(temp,count)) + geom_point(alpha=0.2, aes(color=temp))
bike$datetime
bike$datetime<-as.POSIXct(bike$datetime)
bike$datetime
is.numeric.POSIXt(bike$datetime)
setwd('/Users/sanghyuk/Documents/R/Machine-Learning/Lecture/Machine Learning with R/Linear Regression')
bike <- read.csv('bikeshare.csv')
head(bike)
colnames(bike)
head(bike)
colnames(bike)
ggplot(bike,aes(temp,count)) + geom_point(alpha=0.2, aes(color=temp))
as.POSIXct(bike$datetime)
bike$datetime
source('~/Documents/R/Machine-Learning/Lecture/Machine Learning with R/Linear Regression/Linear Regression Assingment.R', echo=TRUE)
ggplot(bike, aes(datetime, count))+geom_point(alpha=0.2, aes(color=temp))+
scale_color_gradient(low='orange', high='blue')
ggplot(bike, aes(datetime, count))+geom_point(alpha=0.2, aes(color=temp))+
scale_color_gradient(low='red', high='blue')
ggplot(bike, aes(datetime, count))+geom_point(alpha=0.2, aes(color=temp))+
scale_color_gradient(high='red', low='blue')
is.numeric(bike)
sapply(bike, is.numeric)
cor.bike <- cor(df[, c(bike$temp, bike.count)]) #correlation
cor.bike <- cor(df[, c(bike$temp, bike$count)]) #correlation
bike$temp
#Num only
is.numeric(df)
num.cols <- sapply(df, is.numeric) #return only numeric columns
num.cols
cor.data <- cor(df[, num.cols]) #correlation
library(dplyr)
cor.data <- cor(df[, num.cols]) #correlation
num.cols <- sapply(df, is.numeric) #return only numeric columns
cor.bike <- cor(df[, c(bike$temp, bike$count)]) #correlation
cor.bike <- cor(df[, c(bike$temp, bike$count)]) #correlation
cor.bike <- cor(bike[, c(bike$temp, bike$count)]) #correlation
head(bike)
c(bike$temp, bike$count)
cor.bike <- bike$temp
cor.bike
cor.bike <- bike[, c(temp, count)]
head(bike)
cor.bike <- bike[, colnames==c(temp,count)]
bike[temp]
bike[,temp]
bike$
cor.bike <- subset(bike,count) #correlation
cor.bike
bike$
cor.bike <- subset(bike,count) #correlation
bike$
cor.bike <- subset(bike, select=c(temp, count)) #correlation
cor.bike
as.data.fram(cor.bike)
bike$
cor.bike <- subset(bike, select=c(temp, count)) #correlation
cor.bike
bike
cor.bike <- subset(bike, select=c(temp, count)) #correlation
cor.bike
bike1 <- subset(bike, select=c(temp, count)) #correlation
head(bike1)
cor.bike <- cor(df[, bike1])
cor.bike <- cor(bike)
cor.bike <- cor(bike1)
cor.bike
#BOXPLOT
colnames(bike)
summary(bike)
bike.box <- ggplot(df, x=factor(season), y=count)
bike.box <- ggplot(df, x=factor(season), y=count)
bike.box <- ggplot(df, x=factor(season), y=count) + geom_boxplot()
bike.box
bike.box <- ggplot(df, aes(x=factor(season), y=count)) + geom_boxplot()
bike.box <- ggplot(df, aes(x=factor(season), y=count)) + geom_boxplot()
bike.box
bike.box <- ggplot(df, aes(x=factor(season), y=count)) + geom_boxplot()
bike.box
bike.box
bike.box <- ggplot(bike, aes(x=factor(season), y=count)) + geom_boxplot()
bike.box
bike.box <- ggplot(bike, aes(x=factor(season), y=count)) + geom_boxplot(aes(color=factor(season)))
bike.box
#Feature Engineering
bike$datetime[4]
#Feature Engineering
time.stamp <- bike$datetime[4]
format(time.stamp, "%H")
#Feature Engineering
head(bike)
#Feature Engineering
head(bike[, datetime])
#Feature Engineering
head(bike[, bike$datetime])
#Feature Engineering
head(bike[, 1])
#Feature Engineering
head(bike[1])
#Feature Engineering
time.stamp <- bike$datetime
#Feature Engineering
time.stamp <- bike$datetime
time.stamp
time.stamp[1]
#Feature Engineering
time.stamp <- bike[1]
time.stamp
time.stamp1 <- format(time.stamp, %H)
time.stamp1 <- format(time.stamp, %H)
#Feature Engineering
time.stamp <- bike[, 1]
time.stamp1 <- format(time.stamp, %H)
strptime(time.stamp, format="%H")
strptime
strptime(time.stamp, format="%H")
hi<-strptime(time.stamp, format="%H")
hi
time.stamp1 <- strptime(time.stamp, %H)
time.stamp1 <- strptime(time.stamp, format=%H)
time.stamp1 <- strptime(time.stamp, format='%H')
time.stamp1
time.stamp1
time.stamp1 <- strptime(time.stamp, format='%H')
time.stamp1
#Feature Engineering
time.stamp <- bike[, 1]
time.stamp1 <- strptime(time.stamp, format='%H')
time.stamp1
bike
#Feature Engineering
time.stamp <- bike[, 1]
time.stamp
#Feature Engineering
time.stamp <- bike[, 1]
time.stamp
time.stamp1 <- strptime(time.stamp, format='%H')
time.stamp1
time.stamp1 <- strptime(time.stamp, format="%Y-%m-%d %H:%M:%S")
time.stamp1
time.stamp1 <- strptime(time.stamp, format="%Y-%m-%d %H:%M:%S")
time.stamp1
time.stamp1 <- strptime(time.stamp, format="%Y-%M-%d %H:%M:%S")
time.stamp1
bike
head(bike)
time.stamp
#Feature Engineering
time.stamp <- bike[, 1]
time.stamp
time.stamp1 <- strptime(time.stamp, format="%Y-%M-%d %H:%M:%S")
time.stamp1
time.stamp <- bike$datetime[4]
format(time.stamp, "%H")
head(bike)
#Feature Engineering
time.stamp <- bike$datetime
time.stamp
format(time.stamp, "%H")
format(time.stamp, "%Y-%M-%D")
format(time.stamp, "%H")
format(time.stamp, "%y-%m-%d")
bike$datetime<- format(time.stamp, "%H")
head(bike)
library(ggplot2)
getwd()
setwd('/Users/sanghyuk/Documents/R/Machine-Learning/Lecture/Machine Learning with R/Linear Regression')
bike <- read.csv('bikeshare.csv')
head(bike)
colnames(bike)
head(bike)
colnames(bike)
ggplot(bike,aes(temp,count)) + geom_point(alpha=0.2, aes(color=temp))
bike$datetime
as.POSIXct(bike$datetime)
bike$datetime<-as.POSIXct(bike$datetime)
ggplot(bike, aes(datetime, count))+geom_point(alpha=0.2, aes(color=temp))+
scale_color_gradient(high='red', low='blue')
library(dplyr)
head(bike)
bike
bike1 <- subset(bike, select=c(temp, count)) #correlation
head(bike1)
cor.bike <- cor(bike1)
cor.bike
#BOXPLOT
colnames(bike)
summary(bike)
bike.box <- ggplot(bike, aes(x=factor(season), y=count)) + geom_boxplot(aes(color=factor(season)))
bike.box
pl<- ggplot(df, aes(x=factor(cyl), y=mpg))
pl + geom_boxplot()+ coord_flip() #coordinate layer flip시키기
pl+geom_boxplot(fill='blue')
pl+geom_boxplot(aes(fill=factor(cyl))) + theme_dark() #각각 색갈 다르게 정도?
head(bike)
#Feature Engineering
time.stamp <- bike$datetime
bike$datetime<- format(time.stamp, "%H")
format(time.stamp, "%y-%m-%d")
time.stamp <- bike$datetime[4]
format(time.stamp, "%H")
time.stamp <- bike$datetime[4]
format(time.stamp, "%H")
library(ggplot2)
getwd()
setwd('/Users/sanghyuk/Documents/R/Machine-Learning/Lecture/Machine Learning with R/Linear Regression')
bike <- read.csv('bikeshare.csv')
head(bike)
colnames(bike)
head(bike)
colnames(bike)
ggplot(bike,aes(temp,count)) + geom_point(alpha=0.2, aes(color=temp))
bike$datetime
as.POSIXct(bike$datetime)
bike$datetime<-as.POSIXct(bike$datetime)
ggplot(bike, aes(datetime, count))+geom_point(alpha=0.2, aes(color=temp))+
scale_color_gradient(high='red', low='blue')
library(dplyr)
head(bike)
bike
bike1 <- subset(bike, select=c(temp, count)) #correlation
head(bike1)
cor.bike <- cor(bike1)
cor.bike
#BOXPLOT
colnames(bike)
summary(bike)
bike.box <- ggplot(bike, aes(x=factor(season), y=count)) + geom_boxplot(aes(color=factor(season)))
bike.box
pl<- ggplot(df, aes(x=factor(cyl), y=mpg))
pl + geom_boxplot()+ coord_flip() #coordinate layer flip시키기
pl+geom_boxplot(fill='blue')
pl+geom_boxplot(aes(fill=factor(cyl))) + theme_dark() #각각 색갈 다르게 정도?
head(bike)
bike$hour<- format(time.stamp, "%H")
bike$datetime <- format(time.stamp, "%y-%m-%d")
time.stamp <- bike$datetime
head(time.stamp)
bike$hour<- format(time.stamp, "%H")
bike$datetime <- format(time.stamp, "%y-%m-%d")
head(bike)
subset(bike, workingday==1)
bike1 <- subset(bike, workingday==1)
ggplot(subset(bike, workingday==1), aes(x=hour, y=count, color=temp))
ggplot(subset(bike, workingday==1), aes(x=hour, y=count, color=temp)) + geom_point()
ggplot(subset(bike, workingday==1), aes(x=hour, y=count, color=temp)) + geom_point() +
scale_color_gradient(colors=c('blue', 'skyblue', 'yellow', 'red'))
?scale_color_gradient()
ggplot(subset(bike, workingday==1), aes(x=hour, y=count, color=temp)) + geom_point() +
scale_color_gradient(colors=c('blue', 'red', 'yellow', 'green'))
ggplot(subset(bike, workingday==1), aes(x=hour, y=count, color=temp)) + geom_point() +
scale_color_gradient(colors=c('blue', 'red'))
ggplot(subset(bike, workingday==1), aes(x=hour, y=count, color=temp)) + geom_point(position=position_jitter(w=1, h=0))
ggplot(subset(bike, workingday==1), aes(x=hour, y=count, color=temp)) + geom_point()
ggplot(subset(bike, workingday==1), aes(x=hour, y=count, color=temp)) + geom_point(position=position_jitter(w=1, h=0))
ggplot(subset(bike, workingday==1), aes(x=hour, y=count, color=temp)) + geom_point(position=position_jitter(w=1, h=1))
ggplot(subset(bike, workingday==1), aes(x=hour, y=count, color=temp)) + geom_point(position=position_jitter(w=1, h=0))
position_jitter()
?position_jitter()
ggplot(subset(bike, workingday==1), aes(x=hour, y=count, color=temp)) + geom_point(position=position_jitter())
ggplot(subset(bike, workingday==1), aes(x=hour, y=count, color=temp)) + geom_point(position=position_jitter(w=1, h=0))
ggplot(subset(bike, workingday==1), aes(x=hour, y=count, color=temp)) + geom_point(position=position_jitter(w=1, h=0)) +scale_color_gradient()
ggplot(subset(bike), aes(x=workingday, y=count, color=temp)) + geom_point(position=position_jitter(w=1, h=0)) +
scale_color_gradient()
ggplot(subset(bike, workingday==1), aes(x=hour, y=count, color=temp)) + geom_point(position=position_jitter(w=1, h=0)) +
scale_color_gradient()
ggplot(subset(bike, workingday==0), aes(x=hour, y=count, color=temp)) + geom_point(position=position_jitter(w=1, h=0)) +
scale_color_gradient()
#BUILD THE MODEL
model <- lm(. ~ temp , data=train )
#BUILD THE MODEL
model <- lm(. ~ temp , data=bike )
#BUILD THE MODEL
model <- lm(.~ temp , data=bike )
?lm
#BUILD THE MODEL
model <- lm(count ~ temp , data=bike )
#BUILD THE MODEL
temp.model <- lm(count ~ temp , data=bike )
summary(temp.model)
predict(model, 25)
predict(model, c(25))
head(bike)
df(25)
data.frame(25)
?data.frame
data.frame(25, row.names='hi')
data.frame(25, col.names='temp')
predict1<-data.frame(25)
col.names(predict1, c('temp'))
?col.names
row.names
?row.names
colnames(predict1, c('temp'))
colnames(predict1, c('temp'))
colnames(predict1, 'temp')
col.names(predict1) <- 'temp'
colnames(predict1) <- 'temp'
predict1<-colnames(predict1) <- 'temp'
predict1
colnames(predict1) <- 'temp'
predict1
predict1<-data.frame(25)
colnames(predict1) <- 'temp'
predict1
predict(model, predict1)
#
sapply(bike$hour, as.numeric)
#
bike$hour <-sapply(bike$hour, as.numeric)
class(bike$hour)
ggplot(bike,aes(temp,count)) + geom_point(alpha=0.2, aes(color=temp)) +theme_bw()
bike <- read.csv('bikeshare.csv')
ggplot(bike,aes(temp,count)) + geom_point(alpha=0.2, aes(color=temp)) + theme_bw()
bike$datetime<-as.POSIXct(bike$datetime)
ggplot(bike,aes(datetime,count)) + geom_point(aes(color=temp),alpha=0.5)  + scale_color_continuous(low='#55D8CE',high='#FF6E2E') +theme_bw()
cor(bike[, c('temp', 'count')])
ggplot(bike,aes(factor(season),count)) + geom_boxplot(aes(color=factor(season))) +theme_bw()
bike$hour <-sapply(bike$datetime, function(x){format(x, "%H")})
bike$hour <- sapply(bike$datetime, function(x){format(x, "%H")})
pl <- ggplot(filter(bike,workingday==1),aes(hour,count))
pl <- pl + geom_point(position=position_jitter(w=1, h=0),aes(color=temp),alpha=0.5)
pl <- pl + scale_color_gradientn(colours = c('dark blue','blue','light blue','light green','yellow','orange','red'))
pl + theme_bw()
pl <- ggplot(filter(bike,workingday==0),aes(hour,count))
pl <- pl + geom_point(position=position_jitter(w=1, h=0),aes(color=temp),alpha=0.8)
pl <- pl + scale_color_gradientn(colours = c('dark blue','blue','light blue','light green','yellow','orange','red'))
pl + theme_bw()
predict1<-data.frame(temp=c(25))
predict1
predict1<-data.frame(temp=c(25))
predict1
#
model <- lm(count ~ . -casual - registered -datetime -atemp,bike )
summary(model)
