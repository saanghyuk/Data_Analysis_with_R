return(num*2)
}
result <- sapply(v, times2)
print(result)
print(v)
result <- sapply(v, times2)
print(result)
print(v)
return(num*2)
#
v<- 1:5
times2 <- function(num){
return(num*2)
}
print(v)
result <- sapply(v, times2)
print(result)
#이 외에도 apply 매우 많음
help(apply)
#이 외에도 apply 매우 많음
help(sapply)
sapply(v, function(num){num*2 #바로 리턴값})
print(rwsult)
sapply(v, function(num){num*2}) #바로 리턴값
print(result)
print(result)
sapply(v, function(num){num*2}) #바로 리턴값
print(result)
result<-sapply(v, function(num){num*2}) #바로 리턴값
print(result)
print(result)
result<-sapply(v, function(num){num*2}) #바로 리턴값
result<-sapply(v, function(num){num*2}) #바로 리턴
print(result)
result <-sapply(v, function(num){num*2}) #바로 리턴값 입력
print(result)
result <-sapply(v, function(num){num*2}) #바로 리턴값
print(result)
result <-sapply(v, function(num){num*2})
print(result)
result <-sapply(v, function(num){num*2});
result <-sapply(v, function(num){num*2});
result <-sapply(v, function(num){num*2})
print(result)
#
v<- 1:5
result <-sapply(v, function(num){num*2})
print(result)
#한개 이상의 인자에 대한 apply
#Apply with Multiple Inputs
v<-1:5
print(add_choice(2, 10))
add_choice <- function(num, choice){
return (num+choice)
}
print(add_choice(2, 10))
sapply(v, add_choice)
sapply(v, add_choice, choice=100) #It didn't know argument
sapply(v, add_choice, choice=add_choice()) #It didn't know argument
sapply(v, add_choice, choice=add_choice) #It didn't know argument
sapply(v, add_choice, choice=c(1, 2, )) #It didn't know argument
sapply(v, add_choice, choice=c(1, 2, 3)) #It didn't know argument
sapply(v, num=add_choice, choice=c(1, 2, 3)) #It didn't know argument
sapply(v, add_choice, choice=v) #It didn't know argument
math()
?math()
abs(2)
abs(-2)
v <- c(-2, -3, 4)
abs(v)
#sum
sum(V)
#sum
sum(v)
#mean
mean(v)
#round
round(v)
round(2.3334324324, digits=2)
#grepl
grepl
text
text <- "Hi there, do you know who you are voting for?"
text
grepl('voting', tex)
grepl('voting', text)
grepl('dog', text)
grepl('do you', texgt)
grepl('do you', text)
v<- c('a', 'b', 'c', 'd', 'd')
grepl('b', v)
#Index
grep('b', v)
grep('d', v)
grepl('hello', 'hello world')
grep('a', c('b', 'a'))
grepl('b', v) #vector back
grepl('b', v) #vector back
#Index
grep('b', v)
grep('d', v)
grep('a', c('b', 'a'))
#Dates
Sys.Date()
today <- Sys.Date()
class(today)
class(today) #Date Object
#Dates
Sys.Date()
today <- Sys.Date()
class(today) #Date Object
#Date as Character
as.character(Sys.Date())
#Date as Character
date<-as.character(Sys.Date())
is.character(datew)
is.character(date)
#Date as Character
my.date <- as.Date(c)
#Date as Character
my.date <- as.Date(c)
#Date as Character
c<- "1990-01-01"
my.date <- as.Date(c)
class(my.date)
as.Date("Nov-03-1990")
#Foramtting
my.date <- as.Date("Nov-03-90", format="%b-%d-%y")
my.date
#Foramtting
my.date <- as.Date("NOV-03-90", format="%b-%d-%y")
my.date
#Foramtting
my.date <- as.Date("Nov-03-90", format="%b-%d-%y")
#Foramtting
#%d	Day of the month (decimal number)
#%m	Month (decimal number)
#%b	Month (abbreviated)
#%B	Month (full name)
#%y	Year (2 digit)
#%Y	Year (4 digit)
my.date <- as.Date("Nov-03-90", format="%b-%d-%y")
my.date
as.Date("June,01,2002", format="%B,%d,%Y")
#POSIXct #portabla operating system interface
as.POSIXct("11:02:03", format="%H:%M:%S")
#POSIXct #portabla operating system interface
as.POSIXct("11:02:03", format="%H:%M:%S")
?strptime
strptime("11:02:03", format="%H:%M:%S")
help("strptime")
time<-strptime("11:02:03", format="%H:%M:%S")
is.Date(time)
class(time)
class(my.date)
help("strptime")
strptime()
strptime(Sys.Date())
Sys.Date()
strptime(Sys.Date(), "%Y-%m-%d")
hi<-strptime(Sys.Date(), "%Y-%m-%d")
hi
class(hi)
#
install.packages('dplyr')
install.packages('nycflights13') #just data set
library(dplyr)
library(nycflights13)
head(flight)
head(flight)
library(nycflights13)
head(flight)
head(flight)
head(flights)
flights
summary(flights)
#filter() (and slice())
head(flight)
heade(filter(flight, month==11, day==3, carrier=='AA'))
heade(filter(flights, month==11, day==3, carrier=='AA'))
heade(filter(flights, month==11, day==3, carrier=='AA'))
head(filter(flights, month==11, day==3, carrier=='AA'))
#slice()
slice(1:10)
#slice()
slice(flight, 1:10)
#slice()
slice(flight, 1:10)
#slice()
slice(flights, 1:10)
#arrange()
#order하고 싶은 순서대로!
head(arrange(flights, year, month, day, air_time))
#arrange()
#order하고 싶은 순서대로!
head(arrange(flights, year, month, day, air_time))
#arrange()
#order하고 싶은 순서대로!
head(arrange(flights, year, month, day, arr_time))
head(arrange(flights, desc(dep_delay)))
#select()
head(select(flights, carrier))
#select()
head(select(flights, carrier))
head(select(flights, carrier, arr_time))
head(select(flights, carrier, arr_time, month))
#rename()
head(rename(flights, airline_carrier=carrier))
#rename()
head(rename(flights, airline_carrier=carrier))
#rename()
head(rename(flights, airline_carrier=carrier))
#distinct()
distinct(select(flights, carrier))
#mutate()
mutate(flights)
#mutate()
mutate(flights, new_col= arr_delay-delay)
#mutate()
mutate(flights, new_col=arr_delay-dep_delay)
#mutate()
head(mutate(flights, new_col=arr_delay-dep_delay))
#transmute()
head(transmutate(flights, new_col=arr_delay*dep_delay))
#transmute() #mutate랑 같지만, 오직 새로 생긴 칼럼만을 리턴함
head(transmute(flights, new_col=arr_delay*dep_delay))
#summarise()
summarise(flights, avg_air_time=mean(air_time, na.rm=TRUE))
s
#summarise()
summarise(flights, avg_air_time=mean(air_time, na.rm=TRUE))
#sample_n() and sample_frac()
summarise(flights, total_air_time=sum(air_time, na.rm=TRUE))
#sample_n() and sample_frac()
sample_n(flights, 10)
sample_frac(flights, 0.1) #10%
sample_frac(flights, 0.1) #10%
sample_frac(flights, 0.2) #10%
#slice()
slice(flights, 1:10) #row
library(dplyr)
df <- mtcars
df
sample_n(filter(df, mpg>20))
arrange(sample_n(filter(df, mpg>20)))
arrange(sample_n(filter(df, mpg>20), size=5), desc(mpg))
filter(df, mpg>20)
arrange(sample_n(filter(df, mpg>20), size=5), desc(mpg))
result <- arrange(sample_n(filter(df, mpg>20), size=5), desc(mpg))
result
print(result)
print(result)
#그런데 그냥 네스팅 하는거는 너무 복잡하고, 두번째는 변수를 너무 많이 씀.
#Pipe Operator
#Data %>% op1 %>% op2 %>% op3
result <- df %>% filter(mpg>20) %>% sample_n(size=5) %>% arrange(desc(mpg))
result
library(dplyr)
head(mtcars)
#1
filter(mtcars, mpg>20, cyl==6)
#2
arrange(mtcars, cyl, wt)
#2
arrange(mtcars, cyl, desc(wt)
#2
arrange(mtcars, cyl, desc(wt))
#2
arrange(mtcars, cyl, desc(wt))
#2
head(arrange(mtcars, cyl, desc(wt)))
#3
select(df, mpg, hp)
#4
distinct(df, gear)
head(mutate(df, Performance=hp/wt))
#5
summarise(df, avg_mpg=mean(mpg, na.rm=T))
#6
df %>% filter(cyl==6) %>% mean(hp)
#6
df %>% filter(cyl==6) %>% mean(hp, rm.na=T)
#6
df %>% filter(cyl==6) %>% mean(hp, na.rm=T)
#6
df %>% filter(cyl==6)
#6
df %>% filter(cyl==6) %>% select(hp)
#6
df %>% filter(cyl==6) %>% select(hp) &>& mean(hp, na.rm=T)
#6
df %>% filter(cyl==6) %>% select(hp) &>& mean(hp)
#6
df %>% filter(cyl==6) %>% select(hp) %>% mean(hp, na.rm=T)
#6
df %>% filter(cyl==6) %>% select(hp) %>% mean(hp)
#6
df %>% filter(cyl==6) %>% select(hp)
#6
df %>% filter(cyl==6) %>% select(hp) %>% summarise(mean_hp=mean(hp, na.rm=T))
#4
distinct(df, gear)
#6
df %>% filter(cyl==6) %>% summarise(mean_hp=mean(hp, na.rm=T))
#6
df %>% filter(cyl==6) %>% summarise(mean_hp=mean(hp, na.rm=T))
install.packages('tidyr')
install.packages('data.table')
dataframe+ few extra features
#cleaner syntax
#data.table -> dataframe+ few extra features
#cleaner syntax
library(tidyr)
library(data.table)
#data.table -> dataframe+ few extra features
#cleaner syntax
library(tidyr)
library(data.table)
comp <- c(1,1,1,2,2,2,3,3,3)
yr <- c(1998,1999,2000,1998,1999,2000,1998,1999,2000)
q1 <- runif(9, min=0, max=100)
q2 <- runif(9, min=0, max=100)
q3 <- runif(9, min=0, max=100)
q4 <- runif(9, min=0, max=100)
q1
df <- data.frame(comp=comp,year=yr,Qtr1 = q1,Qtr2 = q2,Qtr3 = q3,Qtr4 = q4)
df
#gather()
gather(df, Quarter, Revenue, Qtr1:Qtr4)
#gather()
gather(df, Quarter, Revenue, Qtr1:Qtr4)
df %>% gather(Quarter, Revenue, Qtr1:Qtr4)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocks.gathtered <- stocks %>% gather(stock, price, X:Z)
stocks.gathtered
stocks
stocks
stocks.gathtered
stocks.gathered %>% spread(stock, price)
stocks.gathered %>% spread(stock, price)
stocks.gathered %>% spread(stock, price)
#spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathered %>% spread(stock, price)
stocks.gathtered
stocks.gathered %>% spread(stock, price) #spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathtered %>% spread(stock, price) #spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathered <- stocks %>% gather(stock, price, X:Z)
stocks.gathered <- stocks %>% gather(stock, price, X,Y,Z) #same with above
stocks.gathered
stocks
stocks.gathered %>% spread(stock, price) #spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathered %>% spread(stock, price) #spread 했던 걸 원래대로 되돌리는 듯.
stocks.gathered
spread(stocks.gathered, stock, price)
spread(stocks.gathered, time, price) #기존에 있는 time을 넣었음.
spread(stocks.gathered, stock, price)
stocks.gathered
spread(stocks.gathered, time, price) #기존에 있는 time을 넣었음.
spread(stocks.gathered, stock, price)
stocks.gathered
stocks.gathered
stocks.gathered
spread(stocks.gathered, stock, price)
#separate()
df <- data.frame(new.col=c(NA, "a.x", "b.y", "c.z"))
df
seperate(df, new.col, c('ABC', 'xyz'))
seperate(df, new.col, c('ABC', 'xyz'))
seperate(df, new.col , c('ABC', 'xyz'))
separate(df, new.col , c('ABC', 'xyz'))
df <- data.frame(new.col=c(NA, "a-x", "b-y", "c-z"))
df
separate(data=df, col=new.col, into=c('ABC', 'xyz'))
df <- data.frame(new.col=c(NA, "a-x", "b-y", "c-z"))
separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep=)
separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep='-')
#일단 왠만한건 다 그대로 작동 잘하는데, 안되면 sep달아서 딱 구분 하자
df,sep<- separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep='-')
#일단 왠만한건 다 그대로 작동 잘하는데, 안되면 sep달아서 딱 구분 하자
df.sep<- separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep='-')
#unite()
unite(df.sep)
#unite()
unite(df.sep, col=new.col)
#일단 왠만한건 다 그대로 작동 잘하는데, 안되면 sep달아서 딱 구분 하자
df.sep<- separate(data=df, col=new.col, into=c('ABC', 'xyz'), sep='-')
df.sep
#unite()
unite(df.sep, new.joined.col , abc, xyz )
#unite()
unite(df.sep, new.joined.col , ABC, xyz )
#unite()
unite(df.sep, new.joined.col , ABC, xyz , sep=' ')
#unite()
unite(df.sep, new.joined.col , ABC, xyz , sep='')
unite(df.sep, new.joined.col , ABC, xyz , sep='-')
setwd('/Users/sanghyuk/Documents/R/Machine-Learning/Lecture/Machine Learning with R/Logistic Regression')
adult <- read.csv('adult_sal.csv')
head(adult)
library(dplyr)
adult <- select(adult, -X)
head(adult)
head(adult)
str(adult)
summary(adult)
table(adult$type_employer)
# There are 1836 ?
#Two Smallest Group?
#Never Workded, Without-pay
class(adult$type_employer)
adult$type_employer<-as.character(adult$type_employer)
change_type <- function(column, string1, string2, string3){
output <- column
for( i in 1:length(column)){
if(output[i] == string1){
output[i] <- string3
}else if(output[i] == string2){
output[i] <- string3
}
}
return(output)
}
change_type(adult$type_employer, 'Without-pay', 'Never-worked', 'Unemployed')
#
adult$type_employer<-change_type(adult$type_employer, 'Without-pay', 'Never-worked', 'Unemployed')
unique(adult$type_employer)
table(adult$type_employer)
#
adult$type_employer<-change_type(adult$type_employer, 'State-gov', 'Local-gov', 'SL-gov')
unique(adult$type_employer)
#
adult$type_employer<-change_type(adult$type_employer, 'Self-emp-not-inc', 'Self-emp-inc', 'self-emp')
unique(adult$type_employer)
table(adult$type_employer)
#
adult$marital<-as.character(adult$marital)
head(adult$marital)
adult$marital<-change_type(adult$marital, 'Separated', 'Divorced', 'Not-Married')
adult$marital<-change_type(adult$marital, 'Not-Married', 'Widowed', 'Not-Married')
adult$marital<-change_type(adult$marital, 'Married-civ-spouse', 'Married-spouse-absent', 'Married')
adult$marital<-change_type(adult$marital, 'Married', 'Married-AF-spouse', 'Married')
unique(adult$marital)
table(adult$marital)
#
table(adult$country)
Asia <- c('China','Hong','India','Iran','Cambodia','Japan', 'Laos' ,
'Philippines' ,'Vietnam' ,'Taiwan', 'Thailand')
North.America <- c('Canada','United-States','Puerto-Rico' )
Europe <- c('England' ,'France', 'Germany' ,'Greece','Holand-Netherlands','Hungary',
'Ireland','Italy','Poland','Portugal','Scotland','Yugoslavia')
Latin.and.South.America <- c('Columbia','Cuba','Dominican-Republic','Ecuador',
'El-Salvador','Guatemala','Haiti','Honduras',
'Mexico','Nicaragua','Outlying-US(Guam-USVI-etc)','Peru',
'Jamaica','Trinadad&Tobago')
Other <- c('South')
group_country <- function(ctry){
if (ctry %in% Asia){
return('Asia')
}else if (ctry %in% North.America){
return('North.America')
}else if (ctry %in% Europe){
return('Europe')
}else if (ctry %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
}
adult$country<-sapply(adult$country, group_country)
table(adult$country)
str(adult)
adult$type_employer <- factor(adult$type_employer)
adult$marital <- factor(adult$marital)
adult$country<-factor(adult$country)
str(adult)
#
install.packages('Amelia')
library('Amelia')
missmap(adult, main ='Missing Map'
, col=c('yellow', 'black '), legend = T)
missmap(adult, main ='Missing Map', col=c('yellow', 'black '), legend = T)
adult
adult[adult=='?']
adult[adult=='?', ]
adult[adult[, ]=='?' ]
adult[adult=='?']
#
head(adult)
adult[adult=='?']
adult=='?'
adult[fnlwgt]
adult[type_employer]
adult['type_employer']
adult[adult=='?']
adult=='?'
adult[adult=='?'] <- NA
is.na(adult)
table(adult$type_employer)
missmap(adult, main ='Missing Map', col=c('yellow', 'black '), legend = T)
missmap(adult, main ='Missing Map', col=c('yellow', 'black '), legend = T)
missmap(adult,y.at=c(1),y.labels = c(''),col=c('yellow','black'))
missmap(adult, y.at=c(1),y.labels = c(''),col=c('yellow','black'))
missmap(adult, main ='Missing Map', col=c('yellow', 'black '), legend = T)
missmap(adult, main ='Missing Map', col=c('yellow', 'black '), legend = T)
missmap(adult, main ='Missing Map', col=c('yellow', 'black '), legend = T)
missmap(adult, y.at=c(1),y.labels = c(''),col=c('yellow','black'))
