table(adult$type_employer)
#
adult$marital<-as.character(adult$marital)
head(adult$marital)
adult$marital<-change_type(adult$marital, 'Separated', 'Divorced', 'Not-Married')
adult$marital<-change_type(adult$marital, 'Not-Married', 'Widowed', 'Not-Married')
adult$marital<-change_type(adult$marital, 'Married-civ-spouse', 'Married-spouse-absent', 'Married')
adult$marital<-change_type(adult$marital, 'Married', 'Married-AF-spouse', 'Married')
unique(adult$marital)
table(adult$marital)
#
table(adult$country)
Asia <- c('China','Hong','India','Iran','Cambodia','Japan', 'Laos' ,
'Philippines' ,'Vietnam' ,'Taiwan', 'Thailand')
North.America <- c('Canada','United-States','Puerto-Rico' )
Europe <- c('England' ,'France', 'Germany' ,'Greece','Holand-Netherlands','Hungary',
'Ireland','Italy','Poland','Portugal','Scotland','Yugoslavia')
Latin.and.South.America <- c('Columbia','Cuba','Dominican-Republic','Ecuador',
'El-Salvador','Guatemala','Haiti','Honduras',
'Mexico','Nicaragua','Outlying-US(Guam-USVI-etc)','Peru',
'Jamaica','Trinadad&Tobago')
Other <- c('South')
group_country <- function(ctry){
if (ctry %in% Asia){
return('Asia')
}else if (ctry %in% North.America){
return('North.America')
}else if (ctry %in% Europe){
return('Europe')
}else if (ctry %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
sapply(adult$country, group_country)
sapply(adult$country, group_country)
adult$country
group_country <- function(ctry){
if (ctry %in% Asia){
return('Asia')
}else if (ctry %in% North.America){
return('North.America')
}else if (ctry %in% Europe){
return('Europe')
}else if (ctry %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
}
sapply(adult$country, group_country)
adult$country
setwd('/Users/sanghyuk/Documents/R/Machine-Learning/Lecture/Machine Learning with R/Logistic Regression')
adult <- read.csv('adult_sal.csv')
head(adult)
library(dplyr)
adult <- select(adult, -X)
head(adult)
head(adult)
str(adult)
summary(adult)
table(adult$type_employer)
# There are 1836 ?
#Two Smallest Group?
#Never Workded, Without-pay
class(adult$type_employer)
adult$type_employer<-as.character(adult$type_employer)
change_type <- function(column, string1, string2, string3){
output <- column
for( i in 1:length(column)){
if(output[i] == string1){
output[i] <- string3
}else if(output[i] == string2){
output[i] <- string3
}
}
return(output)
}
change_type(adult$type_employer, 'Without-pay', 'Never-worked', 'Unemployed')
#
adult$type_employer<-change_type(adult$type_employer, 'Without-pay', 'Never-worked', 'Unemployed')
unique(adult$type_employer)
table(adult$type_employer)
#
adult$type_employer<-change_type(adult$type_employer, 'State-gov', 'Local-gov', 'SL-gov')
unique(adult$type_employer)
#
adult$type_employer<-change_type(adult$type_employer, 'Self-emp-not-inc', 'Self-emp-inc', 'self-emp')
unique(adult$type_employer)
table(adult$type_employer)
#
adult$marital<-as.character(adult$marital)
head(adult$marital)
adult$marital<-change_type(adult$marital, 'Separated', 'Divorced', 'Not-Married')
adult$marital<-change_type(adult$marital, 'Not-Married', 'Widowed', 'Not-Married')
adult$marital<-change_type(adult$marital, 'Married-civ-spouse', 'Married-spouse-absent', 'Married')
adult$marital<-change_type(adult$marital, 'Married', 'Married-AF-spouse', 'Married')
unique(adult$marital)
table(adult$marital)
#
table(adult$country)
Asia <- c('China','Hong','India','Iran','Cambodia','Japan', 'Laos' ,
'Philippines' ,'Vietnam' ,'Taiwan', 'Thailand')
North.America <- c('Canada','United-States','Puerto-Rico' )
Europe <- c('England' ,'France', 'Germany' ,'Greece','Holand-Netherlands','Hungary',
'Ireland','Italy','Poland','Portugal','Scotland','Yugoslavia')
Latin.and.South.America <- c('Columbia','Cuba','Dominican-Republic','Ecuador',
'El-Salvador','Guatemala','Haiti','Honduras',
'Mexico','Nicaragua','Outlying-US(Guam-USVI-etc)','Peru',
'Jamaica','Trinadad&Tobago')
Other <- c('South')
group_country <- function(ctry){
if (ctry %in% Asia){
return('Asia')
}else if (ctry %in% North.America){
return('North.America')
}else if (ctry %in% Europe){
return('Europe')
}else if (ctry %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
}
sapply(adult$country, group_country)
i
>
adult <- read.csv('adult_sal.csv')
head(adult)
library(dplyr)
adult <- select(adult, -X)
head(adult)
head(adult)
str(adult)
summary(adult)
table(adult$type_employer)
class(adult$type_employer)
adult$type_employer<-as.character(adult$type_employer)
change_type <- function(column, string1, string2, string3){
output <- column
for( i in 1:length(column)){
if(output[i] == string1){
output[i] <- string3
}else if(output[i] == string2){
output[i] <- string3
}
}
return(output)
}
change_type(adult$type_employer, 'Without-pay', 'Never-worked', 'Unemployed')
adult$type_employer<-change_type(adult$type_employer, 'Without-pay', 'Never-worked', 'Unemployed')
unique(adult$type_employer)
table(adult$type_employer)
adult$type_employer<-change_type(adult$type_employer, 'State-gov', 'Local-gov', 'SL-gov')
unique(adult$type_employer)
adult$type_employer<-change_type(adult$type_employer, 'Self-emp-not-inc', 'Self-emp-inc', 'self-emp')
unique(adult$type_employer)
table(adult$type_employer)
adult$marital<-as.character(adult$marital)
head(adult$marital)
adult$marital<-change_type(adult$marital, 'Separated', 'Divorced', 'Not-Married')
adult$marital<-change_type(adult$marital, 'Not-Married', 'Widowed', 'Not-Married')
adult$marital<-change_type(adult$marital, 'Married-civ-spouse', 'Married-spouse-absent', 'Married')
adult$marital<-change_type(adult$marital, 'Married', 'Married-AF-spouse', 'Married')
unique(adult$marital)
table(adult$marital)
table(adult$country)
Asia <- c('China','Hong','India','Iran','Cambodia','Japan', 'Laos' ,
'Philippines' ,'Vietnam' ,'Taiwan', 'Thailand')
North.America <- c('Canada','United-States','Puerto-Rico' )
Europe <- c('England' ,'France', 'Germany' ,'Greece','Holand-Netherlands','Hungary',
'Ireland','Italy','Poland','Portugal','Scotland','Yugoslavia')
Latin.and.South.America <- c('Columbia','Cuba','Dominican-Republic','Ecuador',
'El-Salvador','Guatemala','Haiti','Honduras',
'Mexico','Nicaragua','Outlying-US(Guam-USVI-etc)','Peru',
'Jamaica','Trinadad&Tobago')
Other <- c('South')
group_country <- function(ctry){
if (ctry %in% Asia){
return('Asia')
}else if (ctry %in% North.America){
return('North.America')
}else if (ctry %in% Europe){
return('Europe')
}else if (ctry %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
}
sapply(adult$country, group_country)
adult$country
adult$country
adult$country<-sapply(adult$country, group_country)
table(adult$country)
adult$type_employer <- factor(adult$type_employer)
adult$marital <- factor(adult$marital)
adult$country<-factor(adult$country)
str(adult)
#
head(adult)
adult=='?'
adult[adult=='?']
adult[, adult=='?']
#
head(adult)
#
adult=='?'
#
head(adult)
adult[adult=='Bachelors']
adult=='Bachelors'
adult[adult=='?'] <- NA
is.na(adult)
table(adult$type_employer)
library('Amelia')
library('Amelia')
missmap(adult, main ='Missing Map', col=c('yellow', 'black '), legend = T)
?missmap
missmap(adult, main ='Missing Map', col=c('yellow', 'black '), legend = T)
missmap(adult,y.labels = c(''),col=c('yellow','black'))
missmap(adult, y.labels = c(''),col=c('yellow','black'))
missmap(adult,  y.at=c(1), y.labels = c(''),col=c('yellow','black'))
na.omit(NA)
df <- data.frame(x=1:5, y=seq(2, 10, 2))
df
df[3,2]= NA
df
na.omit(adult)
missmap(adult,  y.at=c(1), y.labels = c(''),col=c('yellow','black'))
missmap(adult, main ='Missing Map', col=c('yellow', 'black '), legend = T)
missmap(adult, main ='Missing Map', col=c('yellow', 'black '), legend = T)
#NA가 있는 행은 삭제
adult <- na.omit(adult)
missmap(adult,  y.at=c(1), y.labels = c(''),col=c('yellow','black'))
missmap(adult,  y.at=c(1), y.labels = c(''),col=c('yellow','black'))
#NA가 있는 행은 삭제
adult <- na.omit(adult)
str(adult)
library(ggplot2)
ggplot(adult, aes(x=age)) + geom_histogram()
ggplot(adult, aes(x=age, color=income)) + geom_histogram()
ggplot(adult, aes(x=age, fill=income)) + geom_histogram()
ggplot(adult, aes(x=age)) + geom_histogram(aes( fill=income)
ggplot(adult, aes(x=age)) + geom_histogram(aes( fill=income))
ggplot(adult, aes(x=age)) + geom_histogram(aes(fill=income))
ggplot(adult, aes(x=age)) + geom_histogram(aes(fill=income), bins=10)
ggplot(adult, aes(x=age)) + geom_histogram(aes(fill=income), bins=30)
ggplot(adult, aes(x=age)) + geom_histogram(aes(fill=income), bins=50)
ggplot(adult, aes(x=age)) + geom_histogram(aes(fill=income))
ggplot(adult, aes(x=age)) + geom_histogram(aes(fill=income))
#EDA
str(adult)
ggplot(adult, aes(x=hr_per_week))+geom_histogram()
library(plyr)
library(plyr)
rename(adult, c('country'='continent'))
str(adult)
rename(adult, c('country'='continent'))
rename(adult, c('country'='continent'))
str(adult)
adult <- rename(adult, c('country'='continent'))
str(adult)
ggplot(adult, aes(x=region)) + geom_bar()
adult <- rename(adult, c('continent'='region'))
str(adult)
ggplot(adult, aes(x=region)) + geom_bar()
ggplot(adult, aes(x=region)) + geom_bar(aes(color=income))
ggplot(adult, aes(x=region)) + geom_bar(aes(fill=income))
ggplot(adult, aes(x=region)) + geom_bar(aes(fill=income), las=2)
ggplot(adult, aes(x=region)) + geom_bar(aes(fill=income))
bar <- ggplot(adult, aes(x=region)) + geom_bar(aes(fill=income))
text(bar)
text(bar)
bar <- ggplot(adult, aes(x=region)) + geom_bar(aes(fill=income))
text(bar)
bar + theme(axis.text.x = element_text(angle = 90)
bar + theme(axis.text.x = element_text(angle = 90))
bar + theme(axis.text.x = element_text(angle = 90, hjust = 1))
bar <- ggplot(adult, aes(x=region)) + geom_bar(aes(fill=forcats::fct_rev(income)))
bar + theme(axis.text.x = element_text(angle = 90, hjust = 1))
bar <- ggplot(adult, aes(x=region)) + geom_bar(aes(fill = forcats::fct_rev(income)))
bar + theme(axis.text.x = element_text(angle = 90, hjust = 1))
bar <- ggplot(adult, aes(x=region)) + geom_bar(aes(fill=income), position = position_fill(reverse = TRUE))
bar + theme(axis.text.x = element_text(angle = 90, hjust = 1))
bar <- ggplot(adult, aes(x=region)) + geom_bar(aes(fill=income)), position = position_fill(reverse = TRUE)
bar <- ggplot(adult, aes(x=region)) + geom_bar(aes(fill=income)), position = position_fill(reverse = TRUE)
bar <- ggplot(adult, aes(x=region)) + geom_bar(aes(fill=income))
bar + theme(axis.text.x = element_text(angle = 90, hjust = 1))
bar <- ggplot(adult, aes(x=region)) + geom_bar(aes(fill=income), position = position_stack(reverse = TRUE))
bar + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Build a Model
head(adult)
#Train Test Split
library(caTools)
split <- sample.split(adult, SplitRatio = 0.7)
split <- sample.split(adult, SplitRatio = 0.7)
train.set <- subset(adult, split==TRUE)
test.set <- subset(adult, split=FALSE)
help(glm)
glm(formula = income ~ ., family = binomial(logit), data = train.set)
model <- glm(formula = income ~ ., family = binomial(logit), data = train.set)
summary(model)
new.model <- step(model)
summary(model)
summary(model)
help(glm)
new.model <- step(model)
summary(new.model)
probabilities <- predict(new.model, test.set, type='response')
results <- ifelse(probabilities > 0.5, 1, 0)
results
missClassError <- mean(results != test$income)
missClassError <- mean(results != test.set$income)
1 - missClassError
results
test.set$income
results
missClassError <- mean(results != test.set$income)
1 - missClassError
probabilities <- predict(new.model, test.set, type='response')
probabilities
test.set$income
class(test.set$income)
results <- ifelse(probabilities > 0.5, '<=50K', '>50K')
missClassError <- mean(results != test.set$income)
1 - missClassError
1 - missClassError
missClassError <- mean(results != test.set$income)
missClassError
probabilities
class(test.set$income)
test$income
test.set$income
test.set$income
missClassError <- mean(results != test.set$income)
missClassError
missClassError <- mean(results != test.set$income)
missClassError
tble(test.set$income, probabilites > 0.5)
table(test.set$income, probabilites > 0.5)
table(test.set$income, probabilites > 0.5)
table(test.set$income, probabilities > 0.5)
table(test.set$income, probabilities > 0.5)
table(test.set$income, probabilities < 0.5)
adult <- read.csv('adult_sal.csv')
adult <- read.csv('adult_sal.csv')
head(adult)
library(dplyr)
adult <- select(adult, -X)
head(adult)
str(adult)
summary(adult)
table(adult$type_employer)
adult <- read.csv('adult_sal.csv')
library(dplyr)
adult <- select(adult, -X)
table(adult$type_employer)
unemp <- function(job){
job <- as.character(job)
if(job=='Never-worked' | job=='Without-pay'){
return('Unemployed')
}else{
return(job)
}
}
adult$type_employer <- sapply(adult$type_employer, unemp)
table(adult$type_employer)
return('self-emp')
group_emp <- function(job){
if(job=='Local-gov' | job=='State-gov'){
return('SL-gov')
}else if(job=='Self-emp-inc' | job=='Self-emp-not-inc'){
return('self-emp')
}else{
return(job)
}
}
group_emp <- function(job){
if(job=='Local-gov' | job=='State-gov'){
return('SL-gov')
}else if(job=='Self-emp-inc' | job=='Self-emp-not-inc'){
return('self-emp')
}else{
return(job)
}
}
adult$type_employer <- sapply(adult$type_employer, group_emp)
table(adult$type_employer)
table(adult$marital)
group_marital <- function(mar){
mar <- as.character(mar)
# Not-Married
if (mar=='Separated' | mar=='Divorced' | mar=='Widowed'){
return('Not-Married')
# Never-Married
}else if(mar=='Never-married'){
return(mar)
#Married
}else{
return('Married')
}
}
table(adult$marital)
adult$marital <- sapply(adult$marital,group_marital)
table(adult$marital)
table(adult$country)
levels(adult$country)
levels(adult$country)
Asia <- c('China','Hong','India','Iran','Cambodia','Japan', 'Laos' ,
'Philippines' ,'Vietnam' ,'Taiwan', 'Thailand')
North.America <- c('Canada','United-States','Puerto-Rico' )
Europe <- c('England' ,'France', 'Germany' ,'Greece','Holand-Netherlands','Hungary',
'Ireland','Italy','Poland','Portugal','Scotland','Yugoslavia')
Latin.and.South.America <- c('Columbia','Cuba','Dominican-Republic','Ecuador',
'El-Salvador','Guatemala','Haiti','Honduras',
'Mexico','Nicaragua','Outlying-US(Guam-USVI-etc)','Peru',
'Jamaica','Trinadad&Tobago')
Other <- c('South')
if (ctry %in% Asia){
return('Asia')
}else if (ctry %in% North.America){
return('North.America')
}else if (ctry %in% Europe){
return('Europe')
}else if (ctry %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
group_country <- function(ctry){
if (ctry %in% Asia){
return('Asia')
}else if (ctry %in% North.America){
return('North.America')
}else if (ctry %in% Europe){
return('Europe')
}else if (ctry %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
}
adult$country <- sapply(adult$country,group_country)
table(adult$country)
str(adult)
adult$type_employer <- sapply(adult$type_employer,factor)
adult$country <- sapply(adult$country,factor)
adult$marital <- sapply(adult$marital,factor)
str(adult)
library(Amelia)
adult[adult=='?'] <- NA
table(adult$type_employer)
table(adult$type_employer)
adult$type_employer <- sapply(adult$type_employer,factor)
adult$country <- sapply(adult$country,factor)
adult$marital <- sapply(adult$marital,factor)
adult$occupation <- sapply(adult$occupation,factor)
missmap(adult)
missmap(adult,y.at=c(1),y.labels = c(''),col=c('yellow','black'))
# May take awhile
adult <- na.omit(adult)
# May take awhile
adult <- na.omit(adult)
missmap(adult,y.at=c(1),y.labels = c(''),col=c('yellow','black'))
missmap(adult,y.at=c(1),y.labels = c(''),col=c('yellow','black'))
source('~/Documents/R/Machine-Learning/Lecture/Machine Learning with R/Logistic Regression/Logistic Regression Solution.R')
missmap(adult,y.at=c(1),y.labels = c(''),col=c('yellow','black'))
source('~/Documents/R/Machine-Learning/Lecture/Machine Learning with R/Logistic Regression/Logistic Regression Solution.R')
#EDA
str(adult)
library(dplyr)
library(ggplot2)
ggplot(adult,aes(age)) + geom_histogram(aes(fill=income),color='black',binwidth=1) + theme_bw()
ggplot(adult,aes(age)) + geom_histogram(aes(fill=income),color='black',binwidth=1) + theme_bw()
ggplot(adult,aes(hr_per_week)) + geom_histogram() + theme_bw()
names(adult)[names(adult)=="country"] <- "region"
ggplot(adult,aes(region)) + geom_bar(aes(fill=income),color='black')+theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#LOGISTIC REGRESSION MODEL
str(adult)
library(caTools)
set.seed(101)
sample <-sample.split(adult$income, SplitRatio = 0.7)
train <- subset(adult, sample=T)
test <- subset(adult, sample=F)
model <- glm(income ~ ., family=binomial(link='logit'))
model <- glm(income ~ ., family=binomial('logit'))
model <- glm(income ~., family=binomial('logit'))
model <- glm(income ~ ., family=binomial('logit'), data=train)
summary(model)
#step 중요한 걸 불러오는 것 같음.
new.step.model <- step(model)
summary(new.step.model)
#Confusion Matrix
test$predicted.income <- predict(model, newdata=test, type='response')
test$predicted.income
colnames(test)
table(test$income, test$predicted.income > 0.5)
#Accuracy
acc <- (21401+4633)/(21401+1667+3017+4633)
acc
#Confusion Matrix
test$predicted.income <- predict(new.stepmodel, newdata=test, type='response')
#Confusion Matrix
test$predicted.income <- predict(new.step.model, newdata=test, type='response')
table(test$income, test$predicted.income > 0.5)
#Confusion Matrix
test$predicted.income <- predict(new.step.model, newdata=test, type='response')
table(test$income, test$predicted.income > 0.5)
test
str(test)
