lvec <- (T, F)
lvec
lvec <- c(T, F)
lvec
v <- c(FALSE, 30, 40)  #FALSE -> 0
#You must put same data types in one vector
v <- c(TRUE, 20, 40) #TRUE ->1
v <- c('USA', 20, 31) #20, 31 -> character
#Vector names
temps <- c(72, 71, 68 73, 69, 75)
#Vector names
temps <- c(72, 71, 68 73, 69, 75)
#Vector names
temps <- c(72, 71, 68 73, 69, 75)
#Vector names
temps <- c(72, 71, 68, 73, 69, 75)
temps
names(temps) <- c('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat')
temps
names <- days
names(temps) <- days
ls
ls
l
ls
v1 <- c(1, 2, 3)
v2 <- c(5, 6, 7)
v1 +v2
v1- v2
v1-v2
v2-v1
v1/v2
v1*v2
sum(v1)
sum.of.vec <- sum(v1)
sum.of.vec <- sum(v2)
sum.of.vec <- sum(v1)
sd(v1)
mean.of.vec <- mean(v2)
max(v1)
min(v1)
prod <-prod(v1)
prod
prod(c(5, 6, 7))
prod(c(5, 5, 6))
v1 <- c(100, 200, 300)
v2 <- c('a', 'b', 'c')
v1 <- c(100, 200, 300)
v2 <- c('a', 'b', 'c')
v1
v2
#Indexing in R starts at 1
v1
#Indexing in R starts at 1
v1[1]
#Indexing in R starts at 1
v1[1:3]
v2[1:#]
v2[1:3]
v2[1:3]
#Indexing in R starts at 1
v1[1:3]
v2[1:3]
v1[1, 3]
v1[c(1, 3)]
v <- c(1,2,3,4,5,6,7,8,9,10)
v[1:3]
v[2:4]
v[2:4]
v[7:10]
v <- c(1,2,3,4)
names(v) <- c('a', 'b', 'c', 'd')
v[a:b]
v['a':'d']
v[2]
v['b']
v[c('b', 'd')]
v
v
#Filter
v[v>2]
v>2
v>2
my.filter <- v>2
v[my.filter]
help('vector')
help.search('vector')
5 >6
6 <= 7
5==5
2 != 4
v <- 2
v == 3
v == 2
v <- 1
v <- 1
v <- 1
v <- 1
v <- 2
v <= 1
v
my.var <- 2
my.var < -10
my.var <- 10
#
v <- c(1,2,3,4,5)
v < 2
v1<v2
2^5
#2
v1 <- c(23, 27, 23, 21, 34)
v1
#3
day <- c("Mon", "Tue", "Wed", "Thu", "Fri")
names(v1) <-day
v1
#4
mean(v1)
#5
over.23 <- v1<23
over.23
#5
over.23 <- v1>23
over.23
over.23 <- over.23[over.23]
over.23
#5
over.23 <- v1>23
over.23
over.23 <- v1[over.23]
over.23
#6
max(v1)
#6
v1
max(v1)
max(v1)
max(v1)
#6
?max
pmax(v1)
pmax(v1)
max(v1)
#2
stock.price <- c(23, 27, 23, 21, 34)
stock.price
#3
day <- c("Mon", "Tue", "Wed", "Thu", "Fri")
names(stock.price) <-day
stock.price
stock.price
#4
mean(stock.price)
#5
over.23 <- stock.price>23
over.23
over.23 <- stock.price[over.23]
over.23 <- stock.price[over.23]
over.23
#1
2^5
#2
stock.price <- c(23, 27, 23, 21, 34)
stock.price
#3
day <- c("Mon", "Tue", "Wed", "Thu", "Fri")
names(stock.price) <-day
stock.price
#4
mean(stock.price)
#5
over.23 <- stock.price>23
over.23
over.23 <- stock.price[over.23]
over.23
max(stock.price)
#2가지 방법이 있음.
max(stock.price)
stock.price[stock.price==34]
#method 2
stock.price[stock.price == max(stock.price)]
built
ls
#seq(start, end, step)
seq(0, 10, by=2)
seq(0, 10)
seq(0, 100, by=10)
#seq(start, end, step)
seq(0, 10, by=2)
seq(0, 24, by-2)
seq(0, 24, by-2)
seq(0, 24, by=2)
help(seq)
sort(v)
sort(v)
#sort()
v <- c(1, 4, 7, 2, 13, 3, 11)
sort(v)
sort(v, decreasing=T)
sort(v, decreasing=F)
sort(v, decreasing=T)
cv<-c('b', 'd', 'a')
sort(cv)
cv<-c('ba', 'd', 'a')
sort(cv)
cv<-c('b', 'd', 'a', 'C')
sort(cv)
cv<-c('b', 'd', 'a', 'C', 'A')
sort(cv) #알파벳 순서대로, 대문자 먼저
#rev()
v<- 1:10
rev(v)
#str()
str(v)
str(mtcars)
str(mtcars)
#summary
summary(mtcars)
#append() -> merge object together
v <- 1:10
v2 <- 35:40
#append() -> merge object together
v <- 1:10
v2 <- 35:40
v
v2
append(v, v2)
v
v2
append(v2, v)
#Checking and Converting the Data Type
#is
v<- c(1, 2, 3)
is.vector(v)
is.data.frame(v)
is.data.frame(mtcars)
source('~/Documents/R/Machine-Learning/Lecture/Advanced R Programming/Buildt-in R Features.R', encoding = 'UTF-8', echo=TRUE)
#seq(start, end, step)
seq(0, 10, by=2)
seq(0, 100, by=10)
seq(0, 24, by=2)
help(seq)
#sort()
v <- c(1, 4, 7, 2, 13, 3, 11)
sort(v) #ascending
sort(v, decreasing=T)
cv<-c('b', 'd', 'a', 'C', 'A')
sort(cv) #알파벳 순서대로, 대문자 first
#rev() #반대 순서로
v<- 1:10
rev(v)
#str()
str(v)
str(mtcars)
#summary
summary(mtcars)
#append() -> merge object together
v <- 1:10
v2 <- 35:40
append(v, v2)
append(v2, v)
#Checking and Converting the Data Type
#is
v<- c(1, 2, 3)
is.vector(v)
is.data.frame(v)
is.data.frame(mtcars)
is.NA(v)
is.na(v)
#as -> convert data type
as.data.frame(v)
as.list(v)
as.matrix(v)
sample(x=1:10, 1) #built in sample picking function
sample(x=1:10, 1) #built in sample picking function
sample(x=1:10, 1) #built in sample picking function
sample(x=1:10, 1) #built in sample picking function
sample(x=1:10, 1) #built in sample picking function
sample(x=1:10, 1) #built in sample picking function
sample(x=1:10, 1) #built in sample picking function
sample(x=1:10, 1) #built in sample picking function
sample(x=1:10, 1) #built in sample picking function
sample(x=1:10, 1) #built in sample picking function
sample(x=1:10, 1) #built in sample picking function
sample(x=1:10, 1) #built in sample picking function
sample(x=1:10, 1) #built in sample picking function
sample(x=1:100, 1) #built in sample picking function
sample(x=1:100, 1) #built in sample picking function
sample(x=1:100, 1) #built in sample picking function
sample(x=1:100, 1) #built in sample picking function
sample(x=1:100, 1) #built in sample picking function
sample(x=1:100, 1) #built in sample picking function
sample(x=1:100, 1) #built in sample picking function
sample(x=1:100, 1) #built in sample picking function
#Apply
v <-c(1,2,3,4,5)
addrand <- function(x){ #add random number
ran <- sample(1:100, 1)
return (x+ran)
}
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
sample(x=1:100, 1) #built in sample picking function
#Apply
v <-c(1,2,3,4,5)
addrand <- function(x){ #add random number
ran <- sample(1:100, 1)
return (x+ran)
}
print(addrand(10))
result <- lapply(v, addrand)
print(result)
result <- lapply(v, addrand)
print(result)
result <- lapply(v, addrand)
print(result)
#lapply(vector, function)
result <- lapply(v, addrand)
print(result)
#lapply(vector, function)
#lapply -> list 를 리턴
#앞에 벡터의 모든 요소에, 뒤 function을 넣고
#list 로 리턴함
result <- lapply(v, addrand)
#Apply
v <-c(1,2,3,4,5)
#lapply(vector, function)
#lapply -> list 를 리턴
#앞에 벡터의 모든 요소에, 뒤 function을 넣고
#list 로 리턴함
#그니깐, 함수의 인자로, 앞 벡터의 모든 수를 넣네
result <- lapply(v, addrand)
print(result)
#lapply(vector, function)
#lapply -> list 를 리턴
#앞에 벡터의 모든 요소에, 뒤 function을 넣고
#list 로 리턴함
#그니깐, 함수의 인자로, 앞 벡터의 모든 수를 넣네
result <- lapply(v, addrand)
print(result)
#Apply
v <-c(1,2,3,4,5)
#Apply
v <-c(1,2,3,4,5)
addrand <- function(x, y){ #add random number
ran <- sample(1:100, 1)
return (x+y+ran)
}
print(addrand(10))
#lapply(vector, function)
#lapply -> list 를 리턴
#앞에 벡터의 모든 요소에, 뒤 function을 넣고
#list 로 리턴함
#그니깐, 함수의 인자로, 앞 벡터의 모든 수를 넣네
result <- lapply(v, addrand)
#lapply(vector, function)
#lapply -> list 를 리턴
#앞에 벡터의 모든 요소에, 뒤 function을 넣고
#list 로 리턴함
#그니깐, 함수의 인자로, 앞 벡터의 모든 수를 넣네
result <- lapply(v, addrand)
#lapply(vector, function)
#lapply -> list 를 리턴
#앞에 벡터의 모든 요소에, 뒤 function을 넣고
#list 로 리턴함
#그니깐, 함수의 인자로, 앞 벡터의 모든 수를 넣네
result <- lapply(v, addrand)
#Apply
v <-c(1,2,3,4,5)
addrand <- function(x, y){ #add random number
ran <- sample(1:100, 1)
return (x+y+ran)
}
#lapply(vector, function)
#lapply -> list 를 리턴
#앞에 벡터의 모든 요소에, 뒤 function을 넣고
#list 로 리턴함
#그니깐, 함수의 인자로, 앞 벡터의 모든 수를 넣네
result <- lapply(v, addrand)
#sapply #위와 같은데 vector를 리턴
result1<- sapply(v, addrand)
#sapply #위와 같은데 vector를 리턴
result1<- sapply(v, addrand)
addrand <- function(x){ #add random number
ran <- sample(1:100, 1)
return (x+ran)
}
#lapply(vector, function)
#lapply -> list 를 리턴
#앞에 벡터의 모든 요소에, 뒤 function을 넣고
#list 로 리턴함
#그니깐, 함수의 인자로, 앞 벡터의 모든 수를 넣네
result <- lapply(v, addrand)
print(result)
#sapply #위와 같은데 vector를 리턴
result1<- sapply(v, addrand)
resuolt1
result1
sample(x=1:100, 1) #built in sample picking function
#Apply
v <-c(1,2,3,4,5)
addrand <- function(x){ #add random number
ran <- sample(1:100, 1)
return (x+ran)
}
print(addrand(10))
#lapply(vector, function)
#lapply -> list 를 리턴
#앞에 벡터의 모든 요소에, 뒤 function을 넣고
#list 로 리턴함
#그니깐, 함수의 인자로, 앞 벡터의 모든 수를 넣네
result <- lapply(v, addrand)
print(result)
#sapply #위와 같은데 vector를 리턴
result1<- sapply(v, addrand)
result1
#
v<- 1:5
return(num*2)
times2 <- function(num){
return(num*2)
}
result <- sapply(v, times2)
print(result)
print(v)
result <- sapply(v, times2)
print(result)
print(v)
return(num*2)
#
v<- 1:5
times2 <- function(num){
return(num*2)
}
print(v)
result <- sapply(v, times2)
print(result)
#이 외에도 apply 매우 많음
help(apply)
#이 외에도 apply 매우 많음
help(sapply)
sapply(v, function(num){num*2 #바로 리턴값})
print(rwsult)
sapply(v, function(num){num*2}) #바로 리턴값
print(result)
print(result)
sapply(v, function(num){num*2}) #바로 리턴값
print(result)
result<-sapply(v, function(num){num*2}) #바로 리턴값
print(result)
print(result)
result<-sapply(v, function(num){num*2}) #바로 리턴값
result<-sapply(v, function(num){num*2}) #바로 리턴
print(result)
result <-sapply(v, function(num){num*2}) #바로 리턴값 입력
print(result)
result <-sapply(v, function(num){num*2}) #바로 리턴값
print(result)
result <-sapply(v, function(num){num*2})
print(result)
result <-sapply(v, function(num){num*2});
result <-sapply(v, function(num){num*2});
result <-sapply(v, function(num){num*2})
print(result)
