#subset
subset(df, subset=rain==TRUE)
subset(df, subset=temp>23)
#Ordering
sorted.temp <- order(df['temp'])
sorted.temp
df[sorted.temp, ]
sorted.temp #몇등인지 보여줌
is.vector(sorted.temp)
desc.temp <- order(-df['temp'])
df[sorted.temp, ]
df[desc.temp]
df[desc.temp,]
df[sorted.temp, ]
df[sorted.temp, ]
df[desc.temp,]
sorted.temp <- order(df['temp'])
sorted.temp #몇등인지 보여줌
desc.temp <- order(-df['temp'])
df[sorted.temp, ]
df[desc.temp,]
sorted.temp <- order(df['temp'])
sorted.temp #몇등인지 보여줌
desc.temp <- order(-df['temp'])
df[sorted.temp, ]
df[desc.temp,]
desc.temp <- order(-df$temp)
#Creating Data Frames
empty <- data.frame()
c1 <- 1:10
c1
letters
c2 <- letters[1:10]
#Creating Data Frames
empty <- data.frame()
c1 <- 1:10
letters #built in Vector
c2 <- letters[1:10]
df <- data.frame(c1, c2)
df
df <- data.frame(col.name.1 = c1, col.name.2=c2)
df
df <- data.frame(col.name.1 = c1, col.name.2=c2) #column name = input data
df <- data.frame(col.name.1 = c1, col.name.2=c2) #column name = input data
df
#Importing and Exporting Data
write.csv(df, file = 'saved_df.csv')
getwd()
df2 <- read.csv('saved_df.csv')
df2
#Getting Information About Data Frame
df
nrow(df)
ncol(df)
colnames(df)
str(df)
summary(df)
factor(df$col.name.1)
#Referencing Cells
df[[5:2]]
#Referencing Cells
df
df[[5:2]]
df[[5, 2]]
df[[5,1]]
df[[5,1]]
df[[5, 'col.name.2']]
df[5, 'col.name.2']
df[[2, 'col.name.1']] <- 99
df
#Referencing Rows
df[1, ]
#Referencing Rows
df[1, ] #df 그대로 리턴
mtcars
head(mtcars)
mtcars$3
mtcars$mpg
mtcars[, 'mpg']
mtcars[, 1]
matcars[['mpg']]
matcars[['mpg']]
mtcars[['mpg']]
mtcars[[, 'mpg']]
mtcars[[ , 'mpg']]
mtcars[[ 1]]
mtcars
df[[5, 'col.name.2']]
mtcars[[]]
mtcars[[1]]
mtcars[[2]]
mtcars[[2]]
mtcars
#df로 리턴하는 방법
mtcars['mpg']
mtcars[['mpg']]
#df로 리턴하는 방법
mtcars['mpg']
mtcars[1]
mtcars[, 1]
mtcars[1, ]
mtcars[1]
mtcars[1:3]
mtcars[c('mpg', 'cyl')]
# how to return multiple columns DF
mtcars[c('mpg', 'cyl')]
mtcars['mpg']
mtcars[['mpg']]
mtcars['mpg'] #df
mtcars[1]
mtcars[, 1]
mtcars[1]
mtcars[1, ]
mtcars$1
mtcars$mpg
mtcars[[1]]
#Adding Rows
df2 <- data.frame(col.name.1 = 2000, col.name.2 ='new')
df2
df
dfnew <- rbind(df2, df)
dfnew
dfnew <- rbind(df, df2)
dfnew
df
df$col.name.1
df$newcol <- 2*df$col.name.1
df
2*df[1]
2*df[['mpg']]
2*df[['mpg']]
2*df[[1]]
2*df['mpg']
df
2*df['col.name.1']
df
df$newcol
df$newcol.copy <- df$newcol
df
df[, 'newcol']
df[, 'newcol.copy2'] <- df$newcol
df
df[newcol.copy3]<- df$newcol
df[newcol.copy3]
df[newcol.copy2]
df[newcol.copy1]
df['newcol.copy1']
df['newcol']
df
df['newcol.copy']
df[newcol.copy3]<- df$newcol
df['newcol.copy3']<- df$newcol
df
df['newcol.copy3']<- df['newcol.copy2']
df
#Adding Columns
#Referencing Columns
#Setting Column Names
colnames(df) <- c('1', '2', '3', '4', '5', '6')
head(df)
colnames(df)[1] <- 'sanghyuk'
df
rownames(df)[1] <- 'sanghyuk'
df
#Selecting Multiple Rows
df[1:10]
#Selecting Multiple Rows
df[1:3]
#Selecting Multiple Rows
df[1:3, ]
#Selecting Multiple Rows
df[1:3, 1]
#Selecting Multiple Rows
df[1:3, ]
head(df)
df[-2, ]
df[, -2]
#Selecting Multiple Columns
head(mtcars)
mtcars[mtcars$mpg]
mtcars[mtcars$mpg >5 ]
mtcars[ , mtcars$mpg >20 ]
mtcars
mtcars[ mtcars$mpg >20,  ]
head(mtcars)
mtcars[ mtcars['mpg']>20]
mtcars['mpg']> 20
mtcars[ mtcars['mpg']>20]
mtcars[ mtcars['mpg']>20, ]
mtcars[ (mtcars$mpg >20) & (mtcars$cyl ==6) ,  ]
mtcars[ (mtcars$mpg >20) & (mtcars$cyl ==6) , c('mpg', 'cyl', 'hp')]
subset(df)
subset(df)
subset(mtcars)
subset(mtcars, )
subset(mtcars, mpg>20& cyl ==6)
#Selecting Multiple Columns
head(mtcars)
mtcars[, c(1, 2, 3)]
subset(mtcars, c(1,2,3))
mtcars[, c('mpg', 'cyl')]
#Dealing with Missing Data
is.na(mtcars)
any(is.na(df))
any(is.na(mtcars$mpg))
df[is.na(df)] <- 0
df
mtcars$mpg[is.na(mtcars$mpg)] <- 0
mtcars$mpg
mtcars$mpg[is.na(mtcars$mpg)] <- mean(mtcars$mpg)
#Adding Rows
df2 <- data.frame(col.name.1 = 2000, col.name.2 ='new')
df2
df2 <- data.frame(col.name.1 = 3000, col.name.2 ='new')
df
df2
#Adding Rows
df2 <- data.frame(col.name.1 = 2000, col.name.2 ='new')
Sam <- c(22, 15, 'M')
Frank <- c(25, 165, 'M')
Amy <- c(26, 120, 'F')
df <- data.frame(Sam, Frank, Amy)
df
?data.frame()
Age <- c(22, 25, 26)
Weight <- c(150, 165, 120)
Sex <- c('M', 'M', 'F')
df <- data.frame(Age, Weight, Sex)
df
rownames(df) <- c('Sam', 'Frank', 'Amy')
df
#EX2
is.data.frame(mtcars)
#EX3
mat <- matrix(1:25, nrow=5)
mat
?as.data.frame()
?as.data.frame(mat)
as.data.frame(mat)
is.data.frame(mat)
mat <- as.data.frame(mat)
is.data.frame(mat)
#EX4
mtcars
#EX6
df[1:6, ]
#EX4
df<- mtcars
#EX6
df[1:6, ]
#EX7
mean(df[[mpg]])
#EX7
mean(df[['mpg']])
#EX8
df['am', 'gear', 'carb']
#EX8
df[, 'am', 'gear', 'carb']
#EX8
summary(df)
df[9:11]
#EX9
mat
#EX9
df
#EX9
df$performance <- df['hp']/df$wt
head(df)
#EX10
df$performance
df[,'performance']
df[['performance']]
df[['performance']]
#EX10
df$performance
head(df)
#EX9
df$performance <- df['hp']/df$wt
head(df)
#EX9
df$performance <- df$hp/df$wt
head(df)
#EX10
df$performance
df[['performance']]
?round()
round(df$performance, digits = 2)
df$performance <- round(df$performance, digits = 2)
df
head(df)
#EX11
df[, df$mpg > 100]
df$mpg>100
#EX11
df[, df$hp > 100 & df$wt >2.5]
df$hp > 100 & df$wt >2.5
#EX11
df[df$hp > 100 & df$wt >2.5]
#EX11
df[ , df$hp > 100 & df$wt >2.5]
df$hp > 100 & df$wt >2.5
#EX11
df[df$hp > 100 & df$wt >2.5, ]
df
#EX11
df[df$hp > 100 & df$wt >2.5, ]
#EX11
mean(df[df$hp > 100 & df$wt >2.5, ]$mpg)
#EX12
df
#EX12
df['Hornet Sportabout', 'mpg']
#EX1
Name <- c('Sam', 'Frank', 'Amy')
Age <- c(22, 25, 26)
#EX1
Name <- c('Sam', 'Frank', 'Amy')
Age <- c(22, 25, 26)
Weight <- c(150, 165, 120)
Sex <- c('M', 'M', 'F')
df <- data.frame(row.names = Name, Age, Weight, Sex)
df
head(df, 6)
head(df, 2)
#EX4
df<- mtcars
#EX6
df[1:6, ]
head(df, 2)
head(df, 6)
#EX6
df[1:6, ]
#EX7
df['mpg']
#EX7
df[['mpg']]
mean(df[['mpg']])
df[df$cyl==6, ]
subset(df, cyl==6)
#EX8
summary(df)
df[9:11]
#EX12
df['Hornet Sportabout', 'mpg']
#EX12
df['Hornet Sportabout']
#EX12
df['Hornet Sportabout']
df<- mtcars
#EX6
df[1:6, ]
head(df, 6)
#EX7
df[['mpg']]
mean(df[['mpg']])
df[df$cyl==6, ]
subset(df, cyl==6)
#EX8
summary(df)
df[9:11]
#EX9
df$performance <- df$hp/df$wt
head(df)
#EX10
df$performance
?round()
df$performance <- round(df$performance, digits = 2)
head(df)
#EX11
mean(df[df$hp > 100 & df$wt >2.5, ]$mpg)
#EX12
df['Hornet Sportabout']
df['Hornet Sportabout', 'mpg']
#EX12
df['Hornet Sportabout']
#EX12
df[, 'Hornet Sportabout']
#EX12
df['Hornet Sportabout', ]
#EX12
df['Hornet Sportabout', ]$mpg
v <- c(1, 2, 3)
m <- matrix(1:10, nrow=2)
v <- c(1, 2, 3)
m <- matrix(1:10, nrow=2)
v
m
class(v)
class(df)
df <- mtcars
v <- c(1, 2, 3)
m <- matrix(1:10, nrow=2)
df <- mtcars
class(v)
class(df)
class(m)
#List allows us to save various type of data in single Variable
my.list <- list(v, m, df)
my.list
my.list <- list(v, m, df)
my.list
my.named.list <- list(sample.vec = v, my.matrix <- m, sample.df <- df)
my.named.list
my.named.list <- list(sample.vec = v, my.matrix = m, sample.df = df)
my.named.list[sample.vec]
my.named.list['sample.vec']
my.named.list['my.matrix']
my.named.list['sample.df']
#You can use list when organizing your working data
my.named.list <- list(sample.vec = v, my.matrix = m, sample.df = df)
v <- c(1, 2, 3)
m <- matrix(1:10, nrow=2)
df <- mtcars
class(v)
class(m)
class(df)
#List allows us to save various type of data in single Variable
my.list <- list(v, m, df)
my.list
#You can use list when organizing your working data
my.named.list <- list(sample.vec = v, my.matrix = m, sample.df = df)
my.named.list['sample.vec']
my.named.list['my.matrix']
my.named.list['sample.df']
my.named.list$sample.df
my.named.list$sample.vec
my.named.list[1]
class(my.named.list['sample.vec'])
my.named.list$sample.vec
class(my.named.list$sample.vec)
#위 두가지의 차이 알아야 함.
my.named.list[['sample.vec']]
#위 두가지의 차이 알아야 함.
class(my.named.list[['sample.vec']])
#위 두가지의 차이 알아야 함.
class(my.named.list[['sample.vec']]) #numeric vector 로 나옴.
#combining list
double.list <- c(my.named.list, my.named.list)
double.list
str(my.named.list)
getwd()
setwd('/Users/sanghyuk/Documents/R/Machine-Learning/Data Input and Output with R')
write.csv(mtcars, file='my_example.csv')
#Read CSV
ex <-read.csv('another_example.csv')
ex
head(ex)
class(Ex)
class(ex)
write.csv(ex, file='my_new_example.csv')
install.packages("readxl")
library("readxl", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library('readxl')
#이제 Excel을 써보자.
excel_sheets()
#이제 Excel을 써보자.
excel_sheets('Sample-Sales-Data.xlsx')
Sheet1
df <- read_excel('Sample-Sales-Data.xlsx', sheet="Sheet1")
df
head(df)
sum(df$value)
sum(df$value)
sum(df$Value)
summary(df)
#excel_sheets --> return the names of all the sheets
#리스트를 다 가지고 와서, read_excel에 적용해라 excel file의 path에 따라
entire.workbook <- lapply(excel_sheets('Sample-Sales-Data.xlsx'),
read_excel, path='Sample-Sales-Data.xlsx')
entire.workbook
#Writing to Excel File
install.packages('xlxs')
#Writing to Excel File
install.packages('xlsx')
library(xlsx)
head(mtcars)
install.packages('rjava')
install.packages('rJava')
library(xlsx)
install.packages('rJava')
library(xlsx)
install.packages('xlsxjars')
library(xlsx)
#Writing to Excel File
install.packages('xlsx')
library(xlsx)
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages('rJava',,'http://www.rforge.net/')
install.packages('xlsxjars')
install.packages('rJava')
install.packages('rJava')
library(xlsx)
sw_vers
#Writing to Excel File
install.packages('xlsx')
install.packages('rJava')
install.packages('rJava','http://www.rforge.net/')
y
install.packages('rJava')
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("xlsxjars", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages('xlsxjars')
install.packages('rJava')
install.packages('rJava')
library(xlsx)
library(xlsx)
library(xlsx)
library(xlsx)
#Writing to Excel File
install.packages('xlsx')
library(xlsx)
